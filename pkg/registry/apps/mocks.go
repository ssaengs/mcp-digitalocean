// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: AppsService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package apps github.com/digitalocean/godo AppsService
//

// Package apps is a generated GoMock package.
package apps

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockAppsService is a mock of AppsService interface.
type MockAppsService struct {
	ctrl     *gomock.Controller
	recorder *MockAppsServiceMockRecorder
}

// MockAppsServiceMockRecorder is the mock recorder for MockAppsService.
type MockAppsServiceMockRecorder struct {
	mock *MockAppsService
}

// NewMockAppsService creates a new mock instance.
func NewMockAppsService(ctrl *gomock.Controller) *MockAppsService {
	mock := &MockAppsService{ctrl: ctrl}
	mock.recorder = &MockAppsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppsService) EXPECT() *MockAppsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAppsService) Create(arg0 context.Context, arg1 *godo.AppCreateRequest) (*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockAppsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppsService)(nil).Create), arg0, arg1)
}

// CreateDeployment mocks base method.
func (m *MockAppsService) CreateDeployment(arg0 context.Context, arg1 string, arg2 ...*godo.DeploymentCreateRequest) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeployment", varargs...)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockAppsServiceMockRecorder) CreateDeployment(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockAppsService)(nil).CreateDeployment), varargs...)
}

// Delete mocks base method.
func (m *MockAppsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAppsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppsService)(nil).Delete), arg0, arg1)
}

// Detect mocks base method.
func (m *MockAppsService) Detect(arg0 context.Context, arg1 *godo.DetectRequest) (*godo.DetectResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect", arg0, arg1)
	ret0, _ := ret[0].(*godo.DetectResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Detect indicates an expected call of Detect.
func (mr *MockAppsServiceMockRecorder) Detect(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockAppsService)(nil).Detect), arg0, arg1)
}

// Get mocks base method.
func (m *MockAppsService) Get(arg0 context.Context, arg1 string) (*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAppsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppsService)(nil).Get), arg0, arg1)
}

// GetAppDatabaseConnectionDetails mocks base method.
func (m *MockAppsService) GetAppDatabaseConnectionDetails(arg0 context.Context, arg1 string) ([]*godo.GetDatabaseConnectionDetailsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppDatabaseConnectionDetails", arg0, arg1)
	ret0, _ := ret[0].([]*godo.GetDatabaseConnectionDetailsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppDatabaseConnectionDetails indicates an expected call of GetAppDatabaseConnectionDetails.
func (mr *MockAppsServiceMockRecorder) GetAppDatabaseConnectionDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppDatabaseConnectionDetails", reflect.TypeOf((*MockAppsService)(nil).GetAppDatabaseConnectionDetails), arg0, arg1)
}

// GetAppHealth mocks base method.
func (m *MockAppsService) GetAppHealth(arg0 context.Context, arg1 string) (*godo.AppHealth, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppHealth", arg0, arg1)
	ret0, _ := ret[0].(*godo.AppHealth)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppHealth indicates an expected call of GetAppHealth.
func (mr *MockAppsServiceMockRecorder) GetAppHealth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppHealth", reflect.TypeOf((*MockAppsService)(nil).GetAppHealth), arg0, arg1)
}

// GetAppInstances mocks base method.
func (m *MockAppsService) GetAppInstances(arg0 context.Context, arg1 string, arg2 *godo.GetAppInstancesOpts) ([]*godo.AppInstance, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInstances", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*godo.AppInstance)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppInstances indicates an expected call of GetAppInstances.
func (mr *MockAppsServiceMockRecorder) GetAppInstances(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInstances", reflect.TypeOf((*MockAppsService)(nil).GetAppInstances), arg0, arg1, arg2)
}

// GetDeployment mocks base method.
func (m *MockAppsService) GetDeployment(arg0 context.Context, arg1, arg2 string) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockAppsServiceMockRecorder) GetDeployment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockAppsService)(nil).GetDeployment), arg0, arg1, arg2)
}

// GetExec mocks base method.
func (m *MockAppsService) GetExec(arg0 context.Context, arg1, arg2, arg3 string) (*godo.AppExec, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.AppExec)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExec indicates an expected call of GetExec.
func (mr *MockAppsServiceMockRecorder) GetExec(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExec", reflect.TypeOf((*MockAppsService)(nil).GetExec), arg0, arg1, arg2, arg3)
}

// GetExecWithOpts mocks base method.
func (m *MockAppsService) GetExecWithOpts(arg0 context.Context, arg1, arg2 string, arg3 *godo.AppGetExecOptions) (*godo.AppExec, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecWithOpts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.AppExec)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExecWithOpts indicates an expected call of GetExecWithOpts.
func (mr *MockAppsServiceMockRecorder) GetExecWithOpts(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecWithOpts", reflect.TypeOf((*MockAppsService)(nil).GetExecWithOpts), arg0, arg1, arg2, arg3)
}

// GetInstanceSize mocks base method.
func (m *MockAppsService) GetInstanceSize(arg0 context.Context, arg1 string) (*godo.AppInstanceSize, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSize", arg0, arg1)
	ret0, _ := ret[0].(*godo.AppInstanceSize)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSize indicates an expected call of GetInstanceSize.
func (mr *MockAppsServiceMockRecorder) GetInstanceSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSize", reflect.TypeOf((*MockAppsService)(nil).GetInstanceSize), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockAppsService) GetLogs(arg0 context.Context, arg1, arg2, arg3 string, arg4 godo.AppLogType, arg5 bool, arg6 int) (*godo.AppLogs, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*godo.AppLogs)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockAppsServiceMockRecorder) GetLogs(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAppsService)(nil).GetLogs), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetTier mocks base method.
func (m *MockAppsService) GetTier(arg0 context.Context, arg1 string) (*godo.AppTier, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTier", arg0, arg1)
	ret0, _ := ret[0].(*godo.AppTier)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTier indicates an expected call of GetTier.
func (mr *MockAppsServiceMockRecorder) GetTier(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTier", reflect.TypeOf((*MockAppsService)(nil).GetTier), arg0, arg1)
}

// List mocks base method.
func (m *MockAppsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAppsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppsService)(nil).List), arg0, arg1)
}

// ListAlerts mocks base method.
func (m *MockAppsService) ListAlerts(arg0 context.Context, arg1 string) ([]*godo.AppAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlerts", arg0, arg1)
	ret0, _ := ret[0].([]*godo.AppAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlerts indicates an expected call of ListAlerts.
func (mr *MockAppsServiceMockRecorder) ListAlerts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlerts", reflect.TypeOf((*MockAppsService)(nil).ListAlerts), arg0, arg1)
}

// ListBuildpacks mocks base method.
func (m *MockAppsService) ListBuildpacks(arg0 context.Context) ([]*godo.Buildpack, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuildpacks", arg0)
	ret0, _ := ret[0].([]*godo.Buildpack)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBuildpacks indicates an expected call of ListBuildpacks.
func (mr *MockAppsServiceMockRecorder) ListBuildpacks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildpacks", reflect.TypeOf((*MockAppsService)(nil).ListBuildpacks), arg0)
}

// ListDeployments mocks base method.
func (m *MockAppsService) ListDeployments(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockAppsServiceMockRecorder) ListDeployments(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockAppsService)(nil).ListDeployments), arg0, arg1, arg2)
}

// ListInstanceSizes mocks base method.
func (m *MockAppsService) ListInstanceSizes(arg0 context.Context) ([]*godo.AppInstanceSize, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceSizes", arg0)
	ret0, _ := ret[0].([]*godo.AppInstanceSize)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstanceSizes indicates an expected call of ListInstanceSizes.
func (mr *MockAppsServiceMockRecorder) ListInstanceSizes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceSizes", reflect.TypeOf((*MockAppsService)(nil).ListInstanceSizes), arg0)
}

// ListRegions mocks base method.
func (m *MockAppsService) ListRegions(arg0 context.Context) ([]*godo.AppRegion, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", arg0)
	ret0, _ := ret[0].([]*godo.AppRegion)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockAppsServiceMockRecorder) ListRegions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockAppsService)(nil).ListRegions), arg0)
}

// ListTiers mocks base method.
func (m *MockAppsService) ListTiers(arg0 context.Context) ([]*godo.AppTier, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTiers", arg0)
	ret0, _ := ret[0].([]*godo.AppTier)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTiers indicates an expected call of ListTiers.
func (mr *MockAppsServiceMockRecorder) ListTiers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTiers", reflect.TypeOf((*MockAppsService)(nil).ListTiers), arg0)
}

// Propose mocks base method.
func (m *MockAppsService) Propose(arg0 context.Context, arg1 *godo.AppProposeRequest) (*godo.AppProposeResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", arg0, arg1)
	ret0, _ := ret[0].(*godo.AppProposeResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Propose indicates an expected call of Propose.
func (mr *MockAppsServiceMockRecorder) Propose(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockAppsService)(nil).Propose), arg0, arg1)
}

// ResetDatabasePassword mocks base method.
func (m *MockAppsService) ResetDatabasePassword(arg0 context.Context, arg1, arg2 string) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDatabasePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetDatabasePassword indicates an expected call of ResetDatabasePassword.
func (mr *MockAppsServiceMockRecorder) ResetDatabasePassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDatabasePassword", reflect.TypeOf((*MockAppsService)(nil).ResetDatabasePassword), arg0, arg1, arg2)
}

// Restart mocks base method.
func (m *MockAppsService) Restart(arg0 context.Context, arg1 string, arg2 *godo.AppRestartRequest) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Restart indicates an expected call of Restart.
func (mr *MockAppsServiceMockRecorder) Restart(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockAppsService)(nil).Restart), arg0, arg1, arg2)
}

// ToggleDatabaseTrustedSource mocks base method.
func (m *MockAppsService) ToggleDatabaseTrustedSource(arg0 context.Context, arg1, arg2 string, arg3 godo.ToggleDatabaseTrustedSourceOptions) (*godo.ToggleDatabaseTrustedSourceResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleDatabaseTrustedSource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.ToggleDatabaseTrustedSourceResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToggleDatabaseTrustedSource indicates an expected call of ToggleDatabaseTrustedSource.
func (mr *MockAppsServiceMockRecorder) ToggleDatabaseTrustedSource(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleDatabaseTrustedSource", reflect.TypeOf((*MockAppsService)(nil).ToggleDatabaseTrustedSource), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockAppsService) Update(arg0 context.Context, arg1 string, arg2 *godo.AppUpdateRequest) (*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockAppsServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAppsService)(nil).Update), arg0, arg1, arg2)
}

// UpdateAlertDestinations mocks base method.
func (m *MockAppsService) UpdateAlertDestinations(arg0 context.Context, arg1, arg2 string, arg3 *godo.AlertDestinationUpdateRequest) (*godo.AppAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertDestinations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.AppAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAlertDestinations indicates an expected call of UpdateAlertDestinations.
func (mr *MockAppsServiceMockRecorder) UpdateAlertDestinations(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertDestinations", reflect.TypeOf((*MockAppsService)(nil).UpdateAlertDestinations), arg0, arg1, arg2, arg3)
}

// UpgradeBuildpack mocks base method.
func (m *MockAppsService) UpgradeBuildpack(arg0 context.Context, arg1 string, arg2 godo.UpgradeBuildpackOptions) (*godo.UpgradeBuildpackResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeBuildpack", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.UpgradeBuildpackResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpgradeBuildpack indicates an expected call of UpgradeBuildpack.
func (mr *MockAppsServiceMockRecorder) UpgradeBuildpack(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeBuildpack", reflect.TypeOf((*MockAppsService)(nil).UpgradeBuildpack), arg0, arg1, arg2)
}
