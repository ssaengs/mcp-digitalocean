// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: DropletsService,DropletActionsService,SizesService,ImagesService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package droplet github.com/digitalocean/godo DropletsService,DropletActionsService,SizesService,ImagesService
//

// Package droplet is a generated GoMock package.
package droplet

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockDropletsService is a mock of DropletsService interface.
type MockDropletsService struct {
	ctrl     *gomock.Controller
	recorder *MockDropletsServiceMockRecorder
	isgomock struct{}
}

// MockDropletsServiceMockRecorder is the mock recorder for MockDropletsService.
type MockDropletsServiceMockRecorder struct {
	mock *MockDropletsService
}

// NewMockDropletsService creates a new mock instance.
func NewMockDropletsService(ctrl *gomock.Controller) *MockDropletsService {
	mock := &MockDropletsService{ctrl: ctrl}
	mock.recorder = &MockDropletsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletsService) EXPECT() *MockDropletsServiceMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockDropletsService) Actions(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Actions indicates an expected call of Actions.
func (mr *MockDropletsServiceMockRecorder) Actions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockDropletsService)(nil).Actions), arg0, arg1, arg2)
}

// Backups mocks base method.
func (m *MockDropletsService) Backups(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Backups indicates an expected call of Backups.
func (mr *MockDropletsServiceMockRecorder) Backups(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backups", reflect.TypeOf((*MockDropletsService)(nil).Backups), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockDropletsService) Create(arg0 context.Context, arg1 *godo.DropletCreateRequest) (*godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDropletsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDropletsService)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method.
func (m *MockDropletsService) CreateMultiple(arg0 context.Context, arg1 *godo.DropletMultiCreateRequest) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMultiple indicates an expected call of CreateMultiple.
func (mr *MockDropletsServiceMockRecorder) CreateMultiple(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockDropletsService)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDropletsService) Delete(arg0 context.Context, arg1 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDropletsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDropletsService)(nil).Delete), arg0, arg1)
}

// DeleteByTag mocks base method.
func (m *MockDropletsService) DeleteByTag(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTag", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByTag indicates an expected call of DeleteByTag.
func (mr *MockDropletsServiceMockRecorder) DeleteByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTag", reflect.TypeOf((*MockDropletsService)(nil).DeleteByTag), arg0, arg1)
}

// Get mocks base method.
func (m *MockDropletsService) Get(arg0 context.Context, arg1 int) (*godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDropletsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDropletsService)(nil).Get), arg0, arg1)
}

// GetBackupPolicy mocks base method.
func (m *MockDropletsService) GetBackupPolicy(arg0 context.Context, arg1 int) (*godo.DropletBackupPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPolicy", arg0, arg1)
	ret0, _ := ret[0].(*godo.DropletBackupPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBackupPolicy indicates an expected call of GetBackupPolicy.
func (mr *MockDropletsServiceMockRecorder) GetBackupPolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPolicy", reflect.TypeOf((*MockDropletsService)(nil).GetBackupPolicy), arg0, arg1)
}

// Kernels mocks base method.
func (m *MockDropletsService) Kernels(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Kernel, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kernels", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Kernel)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Kernels indicates an expected call of Kernels.
func (mr *MockDropletsServiceMockRecorder) Kernels(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kernels", reflect.TypeOf((*MockDropletsService)(nil).Kernels), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockDropletsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDropletsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDropletsService)(nil).List), arg0, arg1)
}

// ListAssociatedResourcesForDeletion mocks base method.
func (m *MockDropletsService) ListAssociatedResourcesForDeletion(arg0 context.Context, arg1 int) (*godo.DropletAssociatedResources, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedResourcesForDeletion", arg0, arg1)
	ret0, _ := ret[0].(*godo.DropletAssociatedResources)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAssociatedResourcesForDeletion indicates an expected call of ListAssociatedResourcesForDeletion.
func (mr *MockDropletsServiceMockRecorder) ListAssociatedResourcesForDeletion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResourcesForDeletion", reflect.TypeOf((*MockDropletsService)(nil).ListAssociatedResourcesForDeletion), arg0, arg1)
}

// ListBackupPolicies mocks base method.
func (m *MockDropletsService) ListBackupPolicies(arg0 context.Context, arg1 *godo.ListOptions) (map[int]*godo.DropletBackupPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPolicies", arg0, arg1)
	ret0, _ := ret[0].(map[int]*godo.DropletBackupPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBackupPolicies indicates an expected call of ListBackupPolicies.
func (mr *MockDropletsServiceMockRecorder) ListBackupPolicies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPolicies", reflect.TypeOf((*MockDropletsService)(nil).ListBackupPolicies), arg0, arg1)
}

// ListByName mocks base method.
func (m *MockDropletsService) ListByName(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByName indicates an expected call of ListByName.
func (mr *MockDropletsServiceMockRecorder) ListByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockDropletsService)(nil).ListByName), arg0, arg1, arg2)
}

// ListByTag mocks base method.
func (m *MockDropletsService) ListByTag(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTag", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByTag indicates an expected call of ListByTag.
func (mr *MockDropletsServiceMockRecorder) ListByTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTag", reflect.TypeOf((*MockDropletsService)(nil).ListByTag), arg0, arg1, arg2)
}

// ListSupportedBackupPolicies mocks base method.
func (m *MockDropletsService) ListSupportedBackupPolicies(arg0 context.Context) ([]*godo.SupportedBackupPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedBackupPolicies", arg0)
	ret0, _ := ret[0].([]*godo.SupportedBackupPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSupportedBackupPolicies indicates an expected call of ListSupportedBackupPolicies.
func (mr *MockDropletsServiceMockRecorder) ListSupportedBackupPolicies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedBackupPolicies", reflect.TypeOf((*MockDropletsService)(nil).ListSupportedBackupPolicies), arg0)
}

// ListWithGPUs mocks base method.
func (m *MockDropletsService) ListWithGPUs(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithGPUs", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWithGPUs indicates an expected call of ListWithGPUs.
func (mr *MockDropletsServiceMockRecorder) ListWithGPUs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithGPUs", reflect.TypeOf((*MockDropletsService)(nil).ListWithGPUs), arg0, arg1)
}

// Neighbors mocks base method.
func (m *MockDropletsService) Neighbors(arg0 context.Context, arg1 int) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neighbors", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Neighbors indicates an expected call of Neighbors.
func (mr *MockDropletsServiceMockRecorder) Neighbors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neighbors", reflect.TypeOf((*MockDropletsService)(nil).Neighbors), arg0, arg1)
}

// Snapshots mocks base method.
func (m *MockDropletsService) Snapshots(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockDropletsServiceMockRecorder) Snapshots(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockDropletsService)(nil).Snapshots), arg0, arg1, arg2)
}

// MockDropletActionsService is a mock of DropletActionsService interface.
type MockDropletActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockDropletActionsServiceMockRecorder
	isgomock struct{}
}

// MockDropletActionsServiceMockRecorder is the mock recorder for MockDropletActionsService.
type MockDropletActionsServiceMockRecorder struct {
	mock *MockDropletActionsService
}

// NewMockDropletActionsService creates a new mock instance.
func NewMockDropletActionsService(ctrl *gomock.Controller) *MockDropletActionsService {
	mock := &MockDropletActionsService{ctrl: ctrl}
	mock.recorder = &MockDropletActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletActionsService) EXPECT() *MockDropletActionsServiceMockRecorder {
	return m.recorder
}

// ChangeBackupPolicy mocks base method.
func (m *MockDropletActionsService) ChangeBackupPolicy(arg0 context.Context, arg1 int, arg2 *godo.DropletBackupPolicyRequest) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBackupPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeBackupPolicy indicates an expected call of ChangeBackupPolicy.
func (mr *MockDropletActionsServiceMockRecorder) ChangeBackupPolicy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBackupPolicy", reflect.TypeOf((*MockDropletActionsService)(nil).ChangeBackupPolicy), arg0, arg1, arg2)
}

// ChangeKernel mocks base method.
func (m *MockDropletActionsService) ChangeKernel(arg0 context.Context, arg1, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeKernel", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeKernel indicates an expected call of ChangeKernel.
func (mr *MockDropletActionsServiceMockRecorder) ChangeKernel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeKernel", reflect.TypeOf((*MockDropletActionsService)(nil).ChangeKernel), arg0, arg1, arg2)
}

// DisableBackups mocks base method.
func (m *MockDropletActionsService) DisableBackups(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBackups", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DisableBackups indicates an expected call of DisableBackups.
func (mr *MockDropletActionsServiceMockRecorder) DisableBackups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBackups", reflect.TypeOf((*MockDropletActionsService)(nil).DisableBackups), arg0, arg1)
}

// DisableBackupsByTag mocks base method.
func (m *MockDropletActionsService) DisableBackupsByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBackupsByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DisableBackupsByTag indicates an expected call of DisableBackupsByTag.
func (mr *MockDropletActionsServiceMockRecorder) DisableBackupsByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBackupsByTag", reflect.TypeOf((*MockDropletActionsService)(nil).DisableBackupsByTag), arg0, arg1)
}

// EnableBackups mocks base method.
func (m *MockDropletActionsService) EnableBackups(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBackups", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableBackups indicates an expected call of EnableBackups.
func (mr *MockDropletActionsServiceMockRecorder) EnableBackups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBackups", reflect.TypeOf((*MockDropletActionsService)(nil).EnableBackups), arg0, arg1)
}

// EnableBackupsByTag mocks base method.
func (m *MockDropletActionsService) EnableBackupsByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBackupsByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableBackupsByTag indicates an expected call of EnableBackupsByTag.
func (mr *MockDropletActionsServiceMockRecorder) EnableBackupsByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBackupsByTag", reflect.TypeOf((*MockDropletActionsService)(nil).EnableBackupsByTag), arg0, arg1)
}

// EnableBackupsWithPolicy mocks base method.
func (m *MockDropletActionsService) EnableBackupsWithPolicy(arg0 context.Context, arg1 int, arg2 *godo.DropletBackupPolicyRequest) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBackupsWithPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableBackupsWithPolicy indicates an expected call of EnableBackupsWithPolicy.
func (mr *MockDropletActionsServiceMockRecorder) EnableBackupsWithPolicy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBackupsWithPolicy", reflect.TypeOf((*MockDropletActionsService)(nil).EnableBackupsWithPolicy), arg0, arg1, arg2)
}

// EnableIPv6 mocks base method.
func (m *MockDropletActionsService) EnableIPv6(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableIPv6", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableIPv6 indicates an expected call of EnableIPv6.
func (mr *MockDropletActionsServiceMockRecorder) EnableIPv6(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableIPv6", reflect.TypeOf((*MockDropletActionsService)(nil).EnableIPv6), arg0, arg1)
}

// EnableIPv6ByTag mocks base method.
func (m *MockDropletActionsService) EnableIPv6ByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableIPv6ByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableIPv6ByTag indicates an expected call of EnableIPv6ByTag.
func (mr *MockDropletActionsServiceMockRecorder) EnableIPv6ByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableIPv6ByTag", reflect.TypeOf((*MockDropletActionsService)(nil).EnableIPv6ByTag), arg0, arg1)
}

// EnablePrivateNetworking mocks base method.
func (m *MockDropletActionsService) EnablePrivateNetworking(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePrivateNetworking", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnablePrivateNetworking indicates an expected call of EnablePrivateNetworking.
func (mr *MockDropletActionsServiceMockRecorder) EnablePrivateNetworking(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePrivateNetworking", reflect.TypeOf((*MockDropletActionsService)(nil).EnablePrivateNetworking), arg0, arg1)
}

// EnablePrivateNetworkingByTag mocks base method.
func (m *MockDropletActionsService) EnablePrivateNetworkingByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePrivateNetworkingByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnablePrivateNetworkingByTag indicates an expected call of EnablePrivateNetworkingByTag.
func (mr *MockDropletActionsServiceMockRecorder) EnablePrivateNetworkingByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePrivateNetworkingByTag", reflect.TypeOf((*MockDropletActionsService)(nil).EnablePrivateNetworkingByTag), arg0, arg1)
}

// Get mocks base method.
func (m *MockDropletActionsService) Get(arg0 context.Context, arg1, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDropletActionsServiceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDropletActionsService)(nil).Get), arg0, arg1, arg2)
}

// GetByURI mocks base method.
func (m *MockDropletActionsService) GetByURI(arg0 context.Context, arg1 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURI", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByURI indicates an expected call of GetByURI.
func (mr *MockDropletActionsServiceMockRecorder) GetByURI(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURI", reflect.TypeOf((*MockDropletActionsService)(nil).GetByURI), arg0, arg1)
}

// PasswordReset mocks base method.
func (m *MockDropletActionsService) PasswordReset(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordReset", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PasswordReset indicates an expected call of PasswordReset.
func (mr *MockDropletActionsServiceMockRecorder) PasswordReset(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordReset", reflect.TypeOf((*MockDropletActionsService)(nil).PasswordReset), arg0, arg1)
}

// PowerCycle mocks base method.
func (m *MockDropletActionsService) PowerCycle(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerCycle", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerCycle indicates an expected call of PowerCycle.
func (mr *MockDropletActionsServiceMockRecorder) PowerCycle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerCycle", reflect.TypeOf((*MockDropletActionsService)(nil).PowerCycle), arg0, arg1)
}

// PowerCycleByTag mocks base method.
func (m *MockDropletActionsService) PowerCycleByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerCycleByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerCycleByTag indicates an expected call of PowerCycleByTag.
func (mr *MockDropletActionsServiceMockRecorder) PowerCycleByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerCycleByTag", reflect.TypeOf((*MockDropletActionsService)(nil).PowerCycleByTag), arg0, arg1)
}

// PowerOff mocks base method.
func (m *MockDropletActionsService) PowerOff(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockDropletActionsServiceMockRecorder) PowerOff(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockDropletActionsService)(nil).PowerOff), arg0, arg1)
}

// PowerOffByTag mocks base method.
func (m *MockDropletActionsService) PowerOffByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerOffByTag indicates an expected call of PowerOffByTag.
func (mr *MockDropletActionsServiceMockRecorder) PowerOffByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffByTag", reflect.TypeOf((*MockDropletActionsService)(nil).PowerOffByTag), arg0, arg1)
}

// PowerOn mocks base method.
func (m *MockDropletActionsService) PowerOn(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOn", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerOn indicates an expected call of PowerOn.
func (mr *MockDropletActionsServiceMockRecorder) PowerOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOn", reflect.TypeOf((*MockDropletActionsService)(nil).PowerOn), arg0, arg1)
}

// PowerOnByTag mocks base method.
func (m *MockDropletActionsService) PowerOnByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerOnByTag indicates an expected call of PowerOnByTag.
func (mr *MockDropletActionsServiceMockRecorder) PowerOnByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnByTag", reflect.TypeOf((*MockDropletActionsService)(nil).PowerOnByTag), arg0, arg1)
}

// Reboot mocks base method.
func (m *MockDropletActionsService) Reboot(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reboot indicates an expected call of Reboot.
func (mr *MockDropletActionsServiceMockRecorder) Reboot(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockDropletActionsService)(nil).Reboot), arg0, arg1)
}

// RebuildByImageID mocks base method.
func (m *MockDropletActionsService) RebuildByImageID(arg0 context.Context, arg1, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildByImageID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RebuildByImageID indicates an expected call of RebuildByImageID.
func (mr *MockDropletActionsServiceMockRecorder) RebuildByImageID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildByImageID", reflect.TypeOf((*MockDropletActionsService)(nil).RebuildByImageID), arg0, arg1, arg2)
}

// RebuildByImageSlug mocks base method.
func (m *MockDropletActionsService) RebuildByImageSlug(arg0 context.Context, arg1 int, arg2 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildByImageSlug", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RebuildByImageSlug indicates an expected call of RebuildByImageSlug.
func (mr *MockDropletActionsServiceMockRecorder) RebuildByImageSlug(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildByImageSlug", reflect.TypeOf((*MockDropletActionsService)(nil).RebuildByImageSlug), arg0, arg1, arg2)
}

// Rename mocks base method.
func (m *MockDropletActionsService) Rename(arg0 context.Context, arg1 int, arg2 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Rename indicates an expected call of Rename.
func (mr *MockDropletActionsServiceMockRecorder) Rename(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockDropletActionsService)(nil).Rename), arg0, arg1, arg2)
}

// Resize mocks base method.
func (m *MockDropletActionsService) Resize(arg0 context.Context, arg1 int, arg2 string, arg3 bool) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resize indicates an expected call of Resize.
func (mr *MockDropletActionsServiceMockRecorder) Resize(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockDropletActionsService)(nil).Resize), arg0, arg1, arg2, arg3)
}

// Restore mocks base method.
func (m *MockDropletActionsService) Restore(arg0 context.Context, arg1, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Restore indicates an expected call of Restore.
func (mr *MockDropletActionsServiceMockRecorder) Restore(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockDropletActionsService)(nil).Restore), arg0, arg1, arg2)
}

// Shutdown mocks base method.
func (m *MockDropletActionsService) Shutdown(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockDropletActionsServiceMockRecorder) Shutdown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDropletActionsService)(nil).Shutdown), arg0, arg1)
}

// ShutdownByTag mocks base method.
func (m *MockDropletActionsService) ShutdownByTag(arg0 context.Context, arg1 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownByTag", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ShutdownByTag indicates an expected call of ShutdownByTag.
func (mr *MockDropletActionsServiceMockRecorder) ShutdownByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownByTag", reflect.TypeOf((*MockDropletActionsService)(nil).ShutdownByTag), arg0, arg1)
}

// Snapshot mocks base method.
func (m *MockDropletActionsService) Snapshot(arg0 context.Context, arg1 int, arg2 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockDropletActionsServiceMockRecorder) Snapshot(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockDropletActionsService)(nil).Snapshot), arg0, arg1, arg2)
}

// SnapshotByTag mocks base method.
func (m *MockDropletActionsService) SnapshotByTag(arg0 context.Context, arg1, arg2 string) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotByTag", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SnapshotByTag indicates an expected call of SnapshotByTag.
func (mr *MockDropletActionsServiceMockRecorder) SnapshotByTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotByTag", reflect.TypeOf((*MockDropletActionsService)(nil).SnapshotByTag), arg0, arg1, arg2)
}

// MockSizesService is a mock of SizesService interface.
type MockSizesService struct {
	ctrl     *gomock.Controller
	recorder *MockSizesServiceMockRecorder
	isgomock struct{}
}

// MockSizesServiceMockRecorder is the mock recorder for MockSizesService.
type MockSizesServiceMockRecorder struct {
	mock *MockSizesService
}

// NewMockSizesService creates a new mock instance.
func NewMockSizesService(ctrl *gomock.Controller) *MockSizesService {
	mock := &MockSizesService{ctrl: ctrl}
	mock.recorder = &MockSizesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSizesService) EXPECT() *MockSizesServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSizesService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Size, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Size)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockSizesServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSizesService)(nil).List), arg0, arg1)
}

// MockImagesService is a mock of ImagesService interface.
type MockImagesService struct {
	ctrl     *gomock.Controller
	recorder *MockImagesServiceMockRecorder
	isgomock struct{}
}

// MockImagesServiceMockRecorder is the mock recorder for MockImagesService.
type MockImagesServiceMockRecorder struct {
	mock *MockImagesService
}

// NewMockImagesService creates a new mock instance.
func NewMockImagesService(ctrl *gomock.Controller) *MockImagesService {
	mock := &MockImagesService{ctrl: ctrl}
	mock.recorder = &MockImagesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesService) EXPECT() *MockImagesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImagesService) Create(arg0 context.Context, arg1 *godo.CustomImageCreateRequest) (*godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockImagesServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImagesService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockImagesService) Delete(arg0 context.Context, arg1 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockImagesServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImagesService)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockImagesService) GetByID(arg0 context.Context, arg1 int) (*godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockImagesServiceMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockImagesService)(nil).GetByID), arg0, arg1)
}

// GetBySlug mocks base method.
func (m *MockImagesService) GetBySlug(arg0 context.Context, arg1 string) (*godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", arg0, arg1)
	ret0, _ := ret[0].(*godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockImagesServiceMockRecorder) GetBySlug(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockImagesService)(nil).GetBySlug), arg0, arg1)
}

// List mocks base method.
func (m *MockImagesService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockImagesServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockImagesService)(nil).List), arg0, arg1)
}

// ListApplication mocks base method.
func (m *MockImagesService) ListApplication(ctx context.Context, opt *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplication", ctx, opt)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplication indicates an expected call of ListApplication.
func (mr *MockImagesServiceMockRecorder) ListApplication(ctx, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplication", reflect.TypeOf((*MockImagesService)(nil).ListApplication), ctx, opt)
}

// ListByTag mocks base method.
func (m *MockImagesService) ListByTag(ctx context.Context, tag string, opt *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTag", ctx, tag, opt)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByTag indicates an expected call of ListByTag.
func (mr *MockImagesServiceMockRecorder) ListByTag(ctx, tag, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTag", reflect.TypeOf((*MockImagesService)(nil).ListByTag), ctx, tag, opt)
}

// ListDistribution mocks base method.
func (m *MockImagesService) ListDistribution(ctx context.Context, opt *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistribution", ctx, opt)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDistribution indicates an expected call of ListDistribution.
func (mr *MockImagesServiceMockRecorder) ListDistribution(ctx, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistribution", reflect.TypeOf((*MockImagesService)(nil).ListDistribution), ctx, opt)
}

// ListUser mocks base method.
func (m *MockImagesService) ListUser(ctx context.Context, opt *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx, opt)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUser indicates an expected call of ListUser.
func (mr *MockImagesServiceMockRecorder) ListUser(ctx, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockImagesService)(nil).ListUser), ctx, opt)
}

// Update mocks base method.
func (m *MockImagesService) Update(arg0 context.Context, arg1 int, arg2 *godo.ImageUpdateRequest) (*godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockImagesServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImagesService)(nil).Update), arg0, arg1, arg2)
}
