// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: AccountService,ActionsService,BalanceService,BillingHistoryService,InvoicesService,KeysService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package account github.com/digitalocean/godo AccountService,ActionsService,BalanceService,BillingHistoryService,InvoicesService,KeysService
//

// Package account is a generated GoMock package.
package account

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccountService) Get(arg0 context.Context) (*godo.Account, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*godo.Account)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAccountServiceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountService)(nil).Get), arg0)
}

// MockActionsService is a mock of ActionsService interface.
type MockActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockActionsServiceMockRecorder
}

// MockActionsServiceMockRecorder is the mock recorder for MockActionsService.
type MockActionsServiceMockRecorder struct {
	mock *MockActionsService
}

// NewMockActionsService creates a new mock instance.
func NewMockActionsService(ctrl *gomock.Controller) *MockActionsService {
	mock := &MockActionsService{ctrl: ctrl}
	mock.recorder = &MockActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionsService) EXPECT() *MockActionsServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockActionsService) Get(arg0 context.Context, arg1 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockActionsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActionsService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockActionsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockActionsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockActionsService)(nil).List), arg0, arg1)
}

// MockBalanceService is a mock of BalanceService interface.
type MockBalanceService struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceServiceMockRecorder
}

// MockBalanceServiceMockRecorder is the mock recorder for MockBalanceService.
type MockBalanceServiceMockRecorder struct {
	mock *MockBalanceService
}

// NewMockBalanceService creates a new mock instance.
func NewMockBalanceService(ctrl *gomock.Controller) *MockBalanceService {
	mock := &MockBalanceService{ctrl: ctrl}
	mock.recorder = &MockBalanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceService) EXPECT() *MockBalanceServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBalanceService) Get(arg0 context.Context) (*godo.Balance, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*godo.Balance)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockBalanceServiceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBalanceService)(nil).Get), arg0)
}

// MockBillingHistoryService is a mock of BillingHistoryService interface.
type MockBillingHistoryService struct {
	ctrl     *gomock.Controller
	recorder *MockBillingHistoryServiceMockRecorder
}

// MockBillingHistoryServiceMockRecorder is the mock recorder for MockBillingHistoryService.
type MockBillingHistoryServiceMockRecorder struct {
	mock *MockBillingHistoryService
}

// NewMockBillingHistoryService creates a new mock instance.
func NewMockBillingHistoryService(ctrl *gomock.Controller) *MockBillingHistoryService {
	mock := &MockBillingHistoryService{ctrl: ctrl}
	mock.recorder = &MockBillingHistoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingHistoryService) EXPECT() *MockBillingHistoryServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockBillingHistoryService) List(arg0 context.Context, arg1 *godo.ListOptions) (*godo.BillingHistory, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*godo.BillingHistory)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockBillingHistoryServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBillingHistoryService)(nil).List), arg0, arg1)
}

// MockInvoicesService is a mock of InvoicesService interface.
type MockInvoicesService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesServiceMockRecorder
}

// MockInvoicesServiceMockRecorder is the mock recorder for MockInvoicesService.
type MockInvoicesServiceMockRecorder struct {
	mock *MockInvoicesService
}

// NewMockInvoicesService creates a new mock instance.
func NewMockInvoicesService(ctrl *gomock.Controller) *MockInvoicesService {
	mock := &MockInvoicesService{ctrl: ctrl}
	mock.recorder = &MockInvoicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesService) EXPECT() *MockInvoicesServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInvoicesService) Get(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) (*godo.Invoice, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Invoice)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockInvoicesServiceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvoicesService)(nil).Get), arg0, arg1, arg2)
}

// GetCSV mocks base method.
func (m *MockInvoicesService) GetCSV(arg0 context.Context, arg1 string) ([]byte, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSV", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCSV indicates an expected call of GetCSV.
func (mr *MockInvoicesServiceMockRecorder) GetCSV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSV", reflect.TypeOf((*MockInvoicesService)(nil).GetCSV), arg0, arg1)
}

// GetPDF mocks base method.
func (m *MockInvoicesService) GetPDF(arg0 context.Context, arg1 string) ([]byte, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDF", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPDF indicates an expected call of GetPDF.
func (mr *MockInvoicesServiceMockRecorder) GetPDF(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDF", reflect.TypeOf((*MockInvoicesService)(nil).GetPDF), arg0, arg1)
}

// GetSummary mocks base method.
func (m *MockInvoicesService) GetSummary(arg0 context.Context, arg1 string) (*godo.InvoiceSummary, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", arg0, arg1)
	ret0, _ := ret[0].(*godo.InvoiceSummary)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSummary indicates an expected call of GetSummary.
func (mr *MockInvoicesServiceMockRecorder) GetSummary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockInvoicesService)(nil).GetSummary), arg0, arg1)
}

// List mocks base method.
func (m *MockInvoicesService) List(arg0 context.Context, arg1 *godo.ListOptions) (*godo.InvoiceList, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*godo.InvoiceList)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockInvoicesServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInvoicesService)(nil).List), arg0, arg1)
}

// MockKeysService is a mock of KeysService interface.
type MockKeysService struct {
	ctrl     *gomock.Controller
	recorder *MockKeysServiceMockRecorder
}

// MockKeysServiceMockRecorder is the mock recorder for MockKeysService.
type MockKeysServiceMockRecorder struct {
	mock *MockKeysService
}

// NewMockKeysService creates a new mock instance.
func NewMockKeysService(ctrl *gomock.Controller) *MockKeysService {
	mock := &MockKeysService{ctrl: ctrl}
	mock.recorder = &MockKeysServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysService) EXPECT() *MockKeysServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeysService) Create(arg0 context.Context, arg1 *godo.KeyCreateRequest) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockKeysServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeysService)(nil).Create), arg0, arg1)
}

// DeleteByFingerprint mocks base method.
func (m *MockKeysService) DeleteByFingerprint(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByFingerprint indicates an expected call of DeleteByFingerprint.
func (mr *MockKeysServiceMockRecorder) DeleteByFingerprint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByFingerprint", reflect.TypeOf((*MockKeysService)(nil).DeleteByFingerprint), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockKeysService) DeleteByID(arg0 context.Context, arg1 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockKeysServiceMockRecorder) DeleteByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockKeysService)(nil).DeleteByID), arg0, arg1)
}

// GetByFingerprint mocks base method.
func (m *MockKeysService) GetByFingerprint(arg0 context.Context, arg1 string) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFingerprint indicates an expected call of GetByFingerprint.
func (mr *MockKeysServiceMockRecorder) GetByFingerprint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFingerprint", reflect.TypeOf((*MockKeysService)(nil).GetByFingerprint), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockKeysService) GetByID(arg0 context.Context, arg1 int) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockKeysServiceMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockKeysService)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockKeysService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockKeysServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeysService)(nil).List), arg0, arg1)
}

// UpdateByFingerprint mocks base method.
func (m *MockKeysService) UpdateByFingerprint(arg0 context.Context, arg1 string, arg2 *godo.KeyUpdateRequest) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByFingerprint", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateByFingerprint indicates an expected call of UpdateByFingerprint.
func (mr *MockKeysServiceMockRecorder) UpdateByFingerprint(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByFingerprint", reflect.TypeOf((*MockKeysService)(nil).UpdateByFingerprint), arg0, arg1, arg2)
}

// UpdateByID mocks base method.
func (m *MockKeysService) UpdateByID(arg0 context.Context, arg1 int, arg2 *godo.KeyUpdateRequest) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockKeysServiceMockRecorder) UpdateByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockKeysService)(nil).UpdateByID), arg0, arg1, arg2)
}
