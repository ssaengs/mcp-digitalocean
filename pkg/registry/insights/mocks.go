// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: UptimeChecksService,MonitoringService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package insights github.com/digitalocean/godo UptimeChecksService,MonitoringService
//

// Package insights is a generated GoMock package.
package insights

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockUptimeChecksService is a mock of UptimeChecksService interface.
type MockUptimeChecksService struct {
	ctrl     *gomock.Controller
	recorder *MockUptimeChecksServiceMockRecorder
	isgomock struct{}
}

// MockUptimeChecksServiceMockRecorder is the mock recorder for MockUptimeChecksService.
type MockUptimeChecksServiceMockRecorder struct {
	mock *MockUptimeChecksService
}

// NewMockUptimeChecksService creates a new mock instance.
func NewMockUptimeChecksService(ctrl *gomock.Controller) *MockUptimeChecksService {
	mock := &MockUptimeChecksService{ctrl: ctrl}
	mock.recorder = &MockUptimeChecksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUptimeChecksService) EXPECT() *MockUptimeChecksServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUptimeChecksService) Create(arg0 context.Context, arg1 *godo.CreateUptimeCheckRequest) (*godo.UptimeCheck, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.UptimeCheck)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockUptimeChecksServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUptimeChecksService)(nil).Create), arg0, arg1)
}

// CreateAlert mocks base method.
func (m *MockUptimeChecksService) CreateAlert(arg0 context.Context, arg1 string, arg2 *godo.CreateUptimeAlertRequest) (*godo.UptimeAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.UptimeAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAlert indicates an expected call of CreateAlert.
func (mr *MockUptimeChecksServiceMockRecorder) CreateAlert(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlert", reflect.TypeOf((*MockUptimeChecksService)(nil).CreateAlert), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockUptimeChecksService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUptimeChecksServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUptimeChecksService)(nil).Delete), arg0, arg1)
}

// DeleteAlert mocks base method.
func (m *MockUptimeChecksService) DeleteAlert(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlert indicates an expected call of DeleteAlert.
func (mr *MockUptimeChecksServiceMockRecorder) DeleteAlert(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlert", reflect.TypeOf((*MockUptimeChecksService)(nil).DeleteAlert), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockUptimeChecksService) Get(arg0 context.Context, arg1 string) (*godo.UptimeCheck, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.UptimeCheck)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUptimeChecksServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUptimeChecksService)(nil).Get), arg0, arg1)
}

// GetAlert mocks base method.
func (m *MockUptimeChecksService) GetAlert(arg0 context.Context, arg1, arg2 string) (*godo.UptimeAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.UptimeAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockUptimeChecksServiceMockRecorder) GetAlert(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockUptimeChecksService)(nil).GetAlert), arg0, arg1, arg2)
}

// GetState mocks base method.
func (m *MockUptimeChecksService) GetState(arg0 context.Context, arg1 string) (*godo.UptimeCheckState, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(*godo.UptimeCheckState)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetState indicates an expected call of GetState.
func (mr *MockUptimeChecksServiceMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockUptimeChecksService)(nil).GetState), arg0, arg1)
}

// List mocks base method.
func (m *MockUptimeChecksService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.UptimeCheck, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.UptimeCheck)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUptimeChecksServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUptimeChecksService)(nil).List), arg0, arg1)
}

// ListAlerts mocks base method.
func (m *MockUptimeChecksService) ListAlerts(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.UptimeAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlerts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.UptimeAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlerts indicates an expected call of ListAlerts.
func (mr *MockUptimeChecksServiceMockRecorder) ListAlerts(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlerts", reflect.TypeOf((*MockUptimeChecksService)(nil).ListAlerts), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockUptimeChecksService) Update(arg0 context.Context, arg1 string, arg2 *godo.UpdateUptimeCheckRequest) (*godo.UptimeCheck, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.UptimeCheck)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockUptimeChecksServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUptimeChecksService)(nil).Update), arg0, arg1, arg2)
}

// UpdateAlert mocks base method.
func (m *MockUptimeChecksService) UpdateAlert(arg0 context.Context, arg1, arg2 string, arg3 *godo.UpdateUptimeAlertRequest) (*godo.UptimeAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.UptimeAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAlert indicates an expected call of UpdateAlert.
func (mr *MockUptimeChecksServiceMockRecorder) UpdateAlert(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlert", reflect.TypeOf((*MockUptimeChecksService)(nil).UpdateAlert), arg0, arg1, arg2, arg3)
}

// MockMonitoringService is a mock of MonitoringService interface.
type MockMonitoringService struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringServiceMockRecorder
	isgomock struct{}
}

// MockMonitoringServiceMockRecorder is the mock recorder for MockMonitoringService.
type MockMonitoringServiceMockRecorder struct {
	mock *MockMonitoringService
}

// NewMockMonitoringService creates a new mock instance.
func NewMockMonitoringService(ctrl *gomock.Controller) *MockMonitoringService {
	mock := &MockMonitoringService{ctrl: ctrl}
	mock.recorder = &MockMonitoringServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoringService) EXPECT() *MockMonitoringServiceMockRecorder {
	return m.recorder
}

// CreateAlertPolicy mocks base method.
func (m *MockMonitoringService) CreateAlertPolicy(arg0 context.Context, arg1 *godo.AlertPolicyCreateRequest) (*godo.AlertPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertPolicy", arg0, arg1)
	ret0, _ := ret[0].(*godo.AlertPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAlertPolicy indicates an expected call of CreateAlertPolicy.
func (mr *MockMonitoringServiceMockRecorder) CreateAlertPolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertPolicy", reflect.TypeOf((*MockMonitoringService)(nil).CreateAlertPolicy), arg0, arg1)
}

// DeleteAlertPolicy mocks base method.
func (m *MockMonitoringService) DeleteAlertPolicy(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertPolicy", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlertPolicy indicates an expected call of DeleteAlertPolicy.
func (mr *MockMonitoringServiceMockRecorder) DeleteAlertPolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertPolicy", reflect.TypeOf((*MockMonitoringService)(nil).DeleteAlertPolicy), arg0, arg1)
}

// GetAlertPolicy mocks base method.
func (m *MockMonitoringService) GetAlertPolicy(arg0 context.Context, arg1 string) (*godo.AlertPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPolicy", arg0, arg1)
	ret0, _ := ret[0].(*godo.AlertPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlertPolicy indicates an expected call of GetAlertPolicy.
func (mr *MockMonitoringServiceMockRecorder) GetAlertPolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPolicy", reflect.TypeOf((*MockMonitoringService)(nil).GetAlertPolicy), arg0, arg1)
}

// GetDropletAvailableMemory mocks base method.
func (m *MockMonitoringService) GetDropletAvailableMemory(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletAvailableMemory", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletAvailableMemory indicates an expected call of GetDropletAvailableMemory.
func (mr *MockMonitoringServiceMockRecorder) GetDropletAvailableMemory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletAvailableMemory", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletAvailableMemory), arg0, arg1)
}

// GetDropletBandwidth mocks base method.
func (m *MockMonitoringService) GetDropletBandwidth(arg0 context.Context, arg1 *godo.DropletBandwidthMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletBandwidth", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletBandwidth indicates an expected call of GetDropletBandwidth.
func (mr *MockMonitoringServiceMockRecorder) GetDropletBandwidth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletBandwidth", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletBandwidth), arg0, arg1)
}

// GetDropletCPU mocks base method.
func (m *MockMonitoringService) GetDropletCPU(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletCPU", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletCPU indicates an expected call of GetDropletCPU.
func (mr *MockMonitoringServiceMockRecorder) GetDropletCPU(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletCPU", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletCPU), arg0, arg1)
}

// GetDropletCachedMemory mocks base method.
func (m *MockMonitoringService) GetDropletCachedMemory(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletCachedMemory", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletCachedMemory indicates an expected call of GetDropletCachedMemory.
func (mr *MockMonitoringServiceMockRecorder) GetDropletCachedMemory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletCachedMemory", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletCachedMemory), arg0, arg1)
}

// GetDropletFilesystemFree mocks base method.
func (m *MockMonitoringService) GetDropletFilesystemFree(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletFilesystemFree", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletFilesystemFree indicates an expected call of GetDropletFilesystemFree.
func (mr *MockMonitoringServiceMockRecorder) GetDropletFilesystemFree(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletFilesystemFree", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletFilesystemFree), arg0, arg1)
}

// GetDropletFilesystemSize mocks base method.
func (m *MockMonitoringService) GetDropletFilesystemSize(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletFilesystemSize", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletFilesystemSize indicates an expected call of GetDropletFilesystemSize.
func (mr *MockMonitoringServiceMockRecorder) GetDropletFilesystemSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletFilesystemSize", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletFilesystemSize), arg0, arg1)
}

// GetDropletFreeMemory mocks base method.
func (m *MockMonitoringService) GetDropletFreeMemory(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletFreeMemory", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletFreeMemory indicates an expected call of GetDropletFreeMemory.
func (mr *MockMonitoringServiceMockRecorder) GetDropletFreeMemory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletFreeMemory", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletFreeMemory), arg0, arg1)
}

// GetDropletLoad1 mocks base method.
func (m *MockMonitoringService) GetDropletLoad1(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletLoad1", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletLoad1 indicates an expected call of GetDropletLoad1.
func (mr *MockMonitoringServiceMockRecorder) GetDropletLoad1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletLoad1", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletLoad1), arg0, arg1)
}

// GetDropletLoad15 mocks base method.
func (m *MockMonitoringService) GetDropletLoad15(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletLoad15", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletLoad15 indicates an expected call of GetDropletLoad15.
func (mr *MockMonitoringServiceMockRecorder) GetDropletLoad15(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletLoad15", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletLoad15), arg0, arg1)
}

// GetDropletLoad5 mocks base method.
func (m *MockMonitoringService) GetDropletLoad5(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletLoad5", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletLoad5 indicates an expected call of GetDropletLoad5.
func (mr *MockMonitoringServiceMockRecorder) GetDropletLoad5(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletLoad5", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletLoad5), arg0, arg1)
}

// GetDropletTotalMemory mocks base method.
func (m *MockMonitoringService) GetDropletTotalMemory(arg0 context.Context, arg1 *godo.DropletMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropletTotalMemory", arg0, arg1)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDropletTotalMemory indicates an expected call of GetDropletTotalMemory.
func (mr *MockMonitoringServiceMockRecorder) GetDropletTotalMemory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropletTotalMemory", reflect.TypeOf((*MockMonitoringService)(nil).GetDropletTotalMemory), arg0, arg1)
}

// GetLoadBalancerDropletsConnections mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsConnections(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsConnections", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsConnections indicates an expected call of GetLoadBalancerDropletsConnections.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsConnections(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsConnections", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsConnections), ctx, args)
}

// GetLoadBalancerDropletsDowntime mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsDowntime(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsDowntime", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsDowntime indicates an expected call of GetLoadBalancerDropletsDowntime.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsDowntime(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsDowntime", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsDowntime), ctx, args)
}

// GetLoadBalancerDropletsHealthChecks mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHealthChecks(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHealthChecks", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHealthChecks indicates an expected call of GetLoadBalancerDropletsHealthChecks.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHealthChecks(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHealthChecks", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHealthChecks), ctx, args)
}

// GetLoadBalancerDropletsHttpResponseTime50P mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpResponseTime50P(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpResponseTime50P", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpResponseTime50P indicates an expected call of GetLoadBalancerDropletsHttpResponseTime50P.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpResponseTime50P(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpResponseTime50P", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpResponseTime50P), ctx, args)
}

// GetLoadBalancerDropletsHttpResponseTime95P mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpResponseTime95P(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpResponseTime95P", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpResponseTime95P indicates an expected call of GetLoadBalancerDropletsHttpResponseTime95P.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpResponseTime95P(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpResponseTime95P", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpResponseTime95P), ctx, args)
}

// GetLoadBalancerDropletsHttpResponseTime99P mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpResponseTime99P(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpResponseTime99P", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpResponseTime99P indicates an expected call of GetLoadBalancerDropletsHttpResponseTime99P.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpResponseTime99P(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpResponseTime99P", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpResponseTime99P), ctx, args)
}

// GetLoadBalancerDropletsHttpResponseTimeAvg mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpResponseTimeAvg(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpResponseTimeAvg", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpResponseTimeAvg indicates an expected call of GetLoadBalancerDropletsHttpResponseTimeAvg.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpResponseTimeAvg(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpResponseTimeAvg", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpResponseTimeAvg), ctx, args)
}

// GetLoadBalancerDropletsHttpResponses mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpResponses(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpResponses", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpResponses indicates an expected call of GetLoadBalancerDropletsHttpResponses.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpResponses(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpResponses", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpResponses), ctx, args)
}

// GetLoadBalancerDropletsHttpSessionDuration50P mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpSessionDuration50P(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpSessionDuration50P", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpSessionDuration50P indicates an expected call of GetLoadBalancerDropletsHttpSessionDuration50P.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpSessionDuration50P(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpSessionDuration50P", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpSessionDuration50P), ctx, args)
}

// GetLoadBalancerDropletsHttpSessionDuration95P mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpSessionDuration95P(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpSessionDuration95P", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpSessionDuration95P indicates an expected call of GetLoadBalancerDropletsHttpSessionDuration95P.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpSessionDuration95P(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpSessionDuration95P", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpSessionDuration95P), ctx, args)
}

// GetLoadBalancerDropletsHttpSessionDurationAvg mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsHttpSessionDurationAvg(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsHttpSessionDurationAvg", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsHttpSessionDurationAvg indicates an expected call of GetLoadBalancerDropletsHttpSessionDurationAvg.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsHttpSessionDurationAvg(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsHttpSessionDurationAvg", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsHttpSessionDurationAvg), ctx, args)
}

// GetLoadBalancerDropletsQueueSize mocks base method.
func (m *MockMonitoringService) GetLoadBalancerDropletsQueueSize(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerDropletsQueueSize", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerDropletsQueueSize indicates an expected call of GetLoadBalancerDropletsQueueSize.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerDropletsQueueSize(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerDropletsQueueSize", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerDropletsQueueSize), ctx, args)
}

// GetLoadBalancerFrontendConnectionsCurrent mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendConnectionsCurrent(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendConnectionsCurrent", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendConnectionsCurrent indicates an expected call of GetLoadBalancerFrontendConnectionsCurrent.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendConnectionsCurrent(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendConnectionsCurrent", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendConnectionsCurrent), ctx, args)
}

// GetLoadBalancerFrontendConnectionsLimit mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendConnectionsLimit(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendConnectionsLimit", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendConnectionsLimit indicates an expected call of GetLoadBalancerFrontendConnectionsLimit.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendConnectionsLimit(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendConnectionsLimit", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendConnectionsLimit), ctx, args)
}

// GetLoadBalancerFrontendCpuUtilization mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendCpuUtilization(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendCpuUtilization", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendCpuUtilization indicates an expected call of GetLoadBalancerFrontendCpuUtilization.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendCpuUtilization(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendCpuUtilization", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendCpuUtilization), ctx, args)
}

// GetLoadBalancerFrontendFirewallDroppedBytes mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendFirewallDroppedBytes(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendFirewallDroppedBytes", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendFirewallDroppedBytes indicates an expected call of GetLoadBalancerFrontendFirewallDroppedBytes.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendFirewallDroppedBytes(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendFirewallDroppedBytes", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendFirewallDroppedBytes), ctx, args)
}

// GetLoadBalancerFrontendFirewallDroppedPackets mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendFirewallDroppedPackets(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendFirewallDroppedPackets", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendFirewallDroppedPackets indicates an expected call of GetLoadBalancerFrontendFirewallDroppedPackets.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendFirewallDroppedPackets(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendFirewallDroppedPackets", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendFirewallDroppedPackets), ctx, args)
}

// GetLoadBalancerFrontendHttpRequestsPerSecond mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendHttpRequestsPerSecond(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendHttpRequestsPerSecond", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendHttpRequestsPerSecond indicates an expected call of GetLoadBalancerFrontendHttpRequestsPerSecond.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendHttpRequestsPerSecond(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendHttpRequestsPerSecond", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendHttpRequestsPerSecond), ctx, args)
}

// GetLoadBalancerFrontendHttpResponses mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendHttpResponses(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendHttpResponses", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendHttpResponses indicates an expected call of GetLoadBalancerFrontendHttpResponses.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendHttpResponses(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendHttpResponses", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendHttpResponses), ctx, args)
}

// GetLoadBalancerFrontendNetworkThroughputHttp mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendNetworkThroughputHttp(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendNetworkThroughputHttp", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendNetworkThroughputHttp indicates an expected call of GetLoadBalancerFrontendNetworkThroughputHttp.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendNetworkThroughputHttp(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendNetworkThroughputHttp", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendNetworkThroughputHttp), ctx, args)
}

// GetLoadBalancerFrontendNetworkThroughputTcp mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendNetworkThroughputTcp(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendNetworkThroughputTcp", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendNetworkThroughputTcp indicates an expected call of GetLoadBalancerFrontendNetworkThroughputTcp.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendNetworkThroughputTcp(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendNetworkThroughputTcp", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendNetworkThroughputTcp), ctx, args)
}

// GetLoadBalancerFrontendNetworkThroughputUdp mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendNetworkThroughputUdp(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendNetworkThroughputUdp", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendNetworkThroughputUdp indicates an expected call of GetLoadBalancerFrontendNetworkThroughputUdp.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendNetworkThroughputUdp(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendNetworkThroughputUdp", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendNetworkThroughputUdp), ctx, args)
}

// GetLoadBalancerFrontendNlbTcpNetworkThroughput mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendNlbTcpNetworkThroughput(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendNlbTcpNetworkThroughput", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendNlbTcpNetworkThroughput indicates an expected call of GetLoadBalancerFrontendNlbTcpNetworkThroughput.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendNlbTcpNetworkThroughput(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendNlbTcpNetworkThroughput", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendNlbTcpNetworkThroughput), ctx, args)
}

// GetLoadBalancerFrontendNlbUdpNetworkThroughput mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendNlbUdpNetworkThroughput(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendNlbUdpNetworkThroughput", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendNlbUdpNetworkThroughput indicates an expected call of GetLoadBalancerFrontendNlbUdpNetworkThroughput.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendNlbUdpNetworkThroughput(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendNlbUdpNetworkThroughput", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendNlbUdpNetworkThroughput), ctx, args)
}

// GetLoadBalancerFrontendTlsConnectionsCurrent mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendTlsConnectionsCurrent(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendTlsConnectionsCurrent", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendTlsConnectionsCurrent indicates an expected call of GetLoadBalancerFrontendTlsConnectionsCurrent.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendTlsConnectionsCurrent(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendTlsConnectionsCurrent", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendTlsConnectionsCurrent), ctx, args)
}

// GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit indicates an expected call of GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendTlsConnectionsExceedingRateLimit), ctx, args)
}

// GetLoadBalancerFrontendTlsConnectionsLimit mocks base method.
func (m *MockMonitoringService) GetLoadBalancerFrontendTlsConnectionsLimit(ctx context.Context, args *godo.LoadBalancerMetricsRequest) (*godo.MetricsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerFrontendTlsConnectionsLimit", ctx, args)
	ret0, _ := ret[0].(*godo.MetricsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoadBalancerFrontendTlsConnectionsLimit indicates an expected call of GetLoadBalancerFrontendTlsConnectionsLimit.
func (mr *MockMonitoringServiceMockRecorder) GetLoadBalancerFrontendTlsConnectionsLimit(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerFrontendTlsConnectionsLimit", reflect.TypeOf((*MockMonitoringService)(nil).GetLoadBalancerFrontendTlsConnectionsLimit), ctx, args)
}

// ListAlertPolicies mocks base method.
func (m *MockMonitoringService) ListAlertPolicies(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.AlertPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertPolicies", arg0, arg1)
	ret0, _ := ret[0].([]godo.AlertPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertPolicies indicates an expected call of ListAlertPolicies.
func (mr *MockMonitoringServiceMockRecorder) ListAlertPolicies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertPolicies", reflect.TypeOf((*MockMonitoringService)(nil).ListAlertPolicies), arg0, arg1)
}

// UpdateAlertPolicy mocks base method.
func (m *MockMonitoringService) UpdateAlertPolicy(arg0 context.Context, arg1 string, arg2 *godo.AlertPolicyUpdateRequest) (*godo.AlertPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.AlertPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAlertPolicy indicates an expected call of UpdateAlertPolicy.
func (mr *MockMonitoringServiceMockRecorder) UpdateAlertPolicy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertPolicy", reflect.TypeOf((*MockMonitoringService)(nil).UpdateAlertPolicy), arg0, arg1, arg2)
}
