// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: DatabasesService)
//
// Generated by this command:
//
//	mockgen -destination=internal/dbaas/mocks/databases_service_mock.go -package=mocks github.com/digitalocean/godo DatabasesService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabasesService is a mock of DatabasesService interface.
type MockDatabasesService struct {
	ctrl     *gomock.Controller
	recorder *MockDatabasesServiceMockRecorder
	isgomock struct{}
}

// MockDatabasesServiceMockRecorder is the mock recorder for MockDatabasesService.
type MockDatabasesServiceMockRecorder struct {
	mock *MockDatabasesService
}

// NewMockDatabasesService creates a new mock instance.
func NewMockDatabasesService(ctrl *gomock.Controller) *MockDatabasesService {
	mock := &MockDatabasesService{ctrl: ctrl}
	mock.recorder = &MockDatabasesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabasesService) EXPECT() *MockDatabasesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDatabasesService) Create(arg0 context.Context, arg1 *godo.DatabaseCreateRequest) (*godo.Database, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Database)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDatabasesServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatabasesService)(nil).Create), arg0, arg1)
}

// CreateDB mocks base method.
func (m *MockDatabasesService) CreateDB(arg0 context.Context, arg1 string, arg2 *godo.DatabaseCreateDBRequest) (*godo.DatabaseDB, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDB", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseDB)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDB indicates an expected call of CreateDB.
func (mr *MockDatabasesServiceMockRecorder) CreateDB(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDB", reflect.TypeOf((*MockDatabasesService)(nil).CreateDB), arg0, arg1, arg2)
}

// CreateLogsink mocks base method.
func (m *MockDatabasesService) CreateLogsink(ctx context.Context, databaseID string, createLogsink *godo.DatabaseCreateLogsinkRequest) (*godo.DatabaseLogsink, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogsink", ctx, databaseID, createLogsink)
	ret0, _ := ret[0].(*godo.DatabaseLogsink)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateLogsink indicates an expected call of CreateLogsink.
func (mr *MockDatabasesServiceMockRecorder) CreateLogsink(ctx, databaseID, createLogsink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogsink", reflect.TypeOf((*MockDatabasesService)(nil).CreateLogsink), ctx, databaseID, createLogsink)
}

// CreatePool mocks base method.
func (m *MockDatabasesService) CreatePool(arg0 context.Context, arg1 string, arg2 *godo.DatabaseCreatePoolRequest) (*godo.DatabasePool, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabasePool)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockDatabasesServiceMockRecorder) CreatePool(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockDatabasesService)(nil).CreatePool), arg0, arg1, arg2)
}

// CreateReplica mocks base method.
func (m *MockDatabasesService) CreateReplica(arg0 context.Context, arg1 string, arg2 *godo.DatabaseCreateReplicaRequest) (*godo.DatabaseReplica, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplica", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseReplica)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReplica indicates an expected call of CreateReplica.
func (mr *MockDatabasesServiceMockRecorder) CreateReplica(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplica", reflect.TypeOf((*MockDatabasesService)(nil).CreateReplica), arg0, arg1, arg2)
}

// CreateTopic mocks base method.
func (m *MockDatabasesService) CreateTopic(arg0 context.Context, arg1 string, arg2 *godo.DatabaseCreateTopicRequest) (*godo.DatabaseTopic, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseTopic)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockDatabasesServiceMockRecorder) CreateTopic(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockDatabasesService)(nil).CreateTopic), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockDatabasesService) CreateUser(arg0 context.Context, arg1 string, arg2 *godo.DatabaseCreateUserRequest) (*godo.DatabaseUser, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseUser)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabasesServiceMockRecorder) CreateUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabasesService)(nil).CreateUser), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockDatabasesService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabasesServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabasesService)(nil).Delete), arg0, arg1)
}

// DeleteDB mocks base method.
func (m *MockDatabasesService) DeleteDB(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDB", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockDatabasesServiceMockRecorder) DeleteDB(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockDatabasesService)(nil).DeleteDB), arg0, arg1, arg2)
}

// DeleteIndex mocks base method.
func (m *MockDatabasesService) DeleteIndex(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockDatabasesServiceMockRecorder) DeleteIndex(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockDatabasesService)(nil).DeleteIndex), arg0, arg1, arg2)
}

// DeleteLogsink mocks base method.
func (m *MockDatabasesService) DeleteLogsink(ctx context.Context, databaseID, logsinkID string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogsink", ctx, databaseID, logsinkID)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLogsink indicates an expected call of DeleteLogsink.
func (mr *MockDatabasesServiceMockRecorder) DeleteLogsink(ctx, databaseID, logsinkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogsink", reflect.TypeOf((*MockDatabasesService)(nil).DeleteLogsink), ctx, databaseID, logsinkID)
}

// DeletePool mocks base method.
func (m *MockDatabasesService) DeletePool(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockDatabasesServiceMockRecorder) DeletePool(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockDatabasesService)(nil).DeletePool), arg0, arg1, arg2)
}

// DeleteReplica mocks base method.
func (m *MockDatabasesService) DeleteReplica(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplica", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplica indicates an expected call of DeleteReplica.
func (mr *MockDatabasesServiceMockRecorder) DeleteReplica(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplica", reflect.TypeOf((*MockDatabasesService)(nil).DeleteReplica), arg0, arg1, arg2)
}

// DeleteTopic mocks base method.
func (m *MockDatabasesService) DeleteTopic(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockDatabasesServiceMockRecorder) DeleteTopic(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockDatabasesService)(nil).DeleteTopic), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockDatabasesService) DeleteUser(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDatabasesServiceMockRecorder) DeleteUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDatabasesService)(nil).DeleteUser), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockDatabasesService) Get(arg0 context.Context, arg1 string) (*godo.Database, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Database)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDatabasesServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabasesService)(nil).Get), arg0, arg1)
}

// GetCA mocks base method.
func (m *MockDatabasesService) GetCA(arg0 context.Context, arg1 string) (*godo.DatabaseCA, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCA", arg0, arg1)
	ret0, _ := ret[0].(*godo.DatabaseCA)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCA indicates an expected call of GetCA.
func (mr *MockDatabasesServiceMockRecorder) GetCA(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCA", reflect.TypeOf((*MockDatabasesService)(nil).GetCA), arg0, arg1)
}

// GetDB mocks base method.
func (m *MockDatabasesService) GetDB(arg0 context.Context, arg1, arg2 string) (*godo.DatabaseDB, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseDB)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDatabasesServiceMockRecorder) GetDB(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDatabasesService)(nil).GetDB), arg0, arg1, arg2)
}

// GetEvictionPolicy mocks base method.
func (m *MockDatabasesService) GetEvictionPolicy(arg0 context.Context, arg1 string) (string, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvictionPolicy", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvictionPolicy indicates an expected call of GetEvictionPolicy.
func (mr *MockDatabasesServiceMockRecorder) GetEvictionPolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvictionPolicy", reflect.TypeOf((*MockDatabasesService)(nil).GetEvictionPolicy), arg0, arg1)
}

// GetFirewallRules mocks base method.
func (m *MockDatabasesService) GetFirewallRules(arg0 context.Context, arg1 string) ([]godo.DatabaseFirewallRule, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRules", arg0, arg1)
	ret0, _ := ret[0].([]godo.DatabaseFirewallRule)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFirewallRules indicates an expected call of GetFirewallRules.
func (mr *MockDatabasesServiceMockRecorder) GetFirewallRules(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRules", reflect.TypeOf((*MockDatabasesService)(nil).GetFirewallRules), arg0, arg1)
}

// GetKafkaConfig mocks base method.
func (m *MockDatabasesService) GetKafkaConfig(arg0 context.Context, arg1 string) (*godo.KafkaConfig, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKafkaConfig", arg0, arg1)
	ret0, _ := ret[0].(*godo.KafkaConfig)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKafkaConfig indicates an expected call of GetKafkaConfig.
func (mr *MockDatabasesServiceMockRecorder) GetKafkaConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKafkaConfig", reflect.TypeOf((*MockDatabasesService)(nil).GetKafkaConfig), arg0, arg1)
}

// GetLogsink mocks base method.
func (m *MockDatabasesService) GetLogsink(ctx context.Context, databaseID, logsinkID string) (*godo.DatabaseLogsink, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsink", ctx, databaseID, logsinkID)
	ret0, _ := ret[0].(*godo.DatabaseLogsink)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogsink indicates an expected call of GetLogsink.
func (mr *MockDatabasesServiceMockRecorder) GetLogsink(ctx, databaseID, logsinkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsink", reflect.TypeOf((*MockDatabasesService)(nil).GetLogsink), ctx, databaseID, logsinkID)
}

// GetMetricsCredentials mocks base method.
func (m *MockDatabasesService) GetMetricsCredentials(arg0 context.Context) (*godo.DatabaseMetricsCredentials, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsCredentials", arg0)
	ret0, _ := ret[0].(*godo.DatabaseMetricsCredentials)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetricsCredentials indicates an expected call of GetMetricsCredentials.
func (mr *MockDatabasesServiceMockRecorder) GetMetricsCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsCredentials", reflect.TypeOf((*MockDatabasesService)(nil).GetMetricsCredentials), arg0)
}

// GetMongoDBConfig mocks base method.
func (m *MockDatabasesService) GetMongoDBConfig(arg0 context.Context, arg1 string) (*godo.MongoDBConfig, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDBConfig", arg0, arg1)
	ret0, _ := ret[0].(*godo.MongoDBConfig)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMongoDBConfig indicates an expected call of GetMongoDBConfig.
func (mr *MockDatabasesServiceMockRecorder) GetMongoDBConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDBConfig", reflect.TypeOf((*MockDatabasesService)(nil).GetMongoDBConfig), arg0, arg1)
}

// GetMySQLConfig mocks base method.
func (m *MockDatabasesService) GetMySQLConfig(arg0 context.Context, arg1 string) (*godo.MySQLConfig, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMySQLConfig", arg0, arg1)
	ret0, _ := ret[0].(*godo.MySQLConfig)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMySQLConfig indicates an expected call of GetMySQLConfig.
func (mr *MockDatabasesServiceMockRecorder) GetMySQLConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMySQLConfig", reflect.TypeOf((*MockDatabasesService)(nil).GetMySQLConfig), arg0, arg1)
}

// GetOnlineMigrationStatus mocks base method.
func (m *MockDatabasesService) GetOnlineMigrationStatus(ctx context.Context, databaseID string) (*godo.DatabaseOnlineMigrationStatus, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineMigrationStatus", ctx, databaseID)
	ret0, _ := ret[0].(*godo.DatabaseOnlineMigrationStatus)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOnlineMigrationStatus indicates an expected call of GetOnlineMigrationStatus.
func (mr *MockDatabasesServiceMockRecorder) GetOnlineMigrationStatus(ctx, databaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineMigrationStatus", reflect.TypeOf((*MockDatabasesService)(nil).GetOnlineMigrationStatus), ctx, databaseID)
}

// GetOpensearchConfig mocks base method.
func (m *MockDatabasesService) GetOpensearchConfig(arg0 context.Context, arg1 string) (*godo.OpensearchConfig, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpensearchConfig", arg0, arg1)
	ret0, _ := ret[0].(*godo.OpensearchConfig)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOpensearchConfig indicates an expected call of GetOpensearchConfig.
func (mr *MockDatabasesServiceMockRecorder) GetOpensearchConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpensearchConfig", reflect.TypeOf((*MockDatabasesService)(nil).GetOpensearchConfig), arg0, arg1)
}

// GetPool mocks base method.
func (m *MockDatabasesService) GetPool(arg0 context.Context, arg1, arg2 string) (*godo.DatabasePool, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabasePool)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPool indicates an expected call of GetPool.
func (mr *MockDatabasesServiceMockRecorder) GetPool(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockDatabasesService)(nil).GetPool), arg0, arg1, arg2)
}

// GetPostgreSQLConfig mocks base method.
func (m *MockDatabasesService) GetPostgreSQLConfig(arg0 context.Context, arg1 string) (*godo.PostgreSQLConfig, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgreSQLConfig", arg0, arg1)
	ret0, _ := ret[0].(*godo.PostgreSQLConfig)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPostgreSQLConfig indicates an expected call of GetPostgreSQLConfig.
func (mr *MockDatabasesServiceMockRecorder) GetPostgreSQLConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgreSQLConfig", reflect.TypeOf((*MockDatabasesService)(nil).GetPostgreSQLConfig), arg0, arg1)
}

// GetRedisConfig mocks base method.
func (m *MockDatabasesService) GetRedisConfig(arg0 context.Context, arg1 string) (*godo.RedisConfig, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedisConfig", arg0, arg1)
	ret0, _ := ret[0].(*godo.RedisConfig)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRedisConfig indicates an expected call of GetRedisConfig.
func (mr *MockDatabasesServiceMockRecorder) GetRedisConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedisConfig", reflect.TypeOf((*MockDatabasesService)(nil).GetRedisConfig), arg0, arg1)
}

// GetReplica mocks base method.
func (m *MockDatabasesService) GetReplica(arg0 context.Context, arg1, arg2 string) (*godo.DatabaseReplica, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplica", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseReplica)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReplica indicates an expected call of GetReplica.
func (mr *MockDatabasesServiceMockRecorder) GetReplica(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplica", reflect.TypeOf((*MockDatabasesService)(nil).GetReplica), arg0, arg1, arg2)
}

// GetSQLMode mocks base method.
func (m *MockDatabasesService) GetSQLMode(arg0 context.Context, arg1 string) (string, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLMode", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSQLMode indicates an expected call of GetSQLMode.
func (mr *MockDatabasesServiceMockRecorder) GetSQLMode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLMode", reflect.TypeOf((*MockDatabasesService)(nil).GetSQLMode), arg0, arg1)
}

// GetTopic mocks base method.
func (m *MockDatabasesService) GetTopic(arg0 context.Context, arg1, arg2 string) (*godo.DatabaseTopic, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseTopic)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTopic indicates an expected call of GetTopic.
func (mr *MockDatabasesServiceMockRecorder) GetTopic(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockDatabasesService)(nil).GetTopic), arg0, arg1, arg2)
}

// GetUser mocks base method.
func (m *MockDatabasesService) GetUser(arg0 context.Context, arg1, arg2 string) (*godo.DatabaseUser, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DatabaseUser)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabasesServiceMockRecorder) GetUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabasesService)(nil).GetUser), arg0, arg1, arg2)
}

// InstallUpdate mocks base method.
func (m *MockDatabasesService) InstallUpdate(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallUpdate", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallUpdate indicates an expected call of InstallUpdate.
func (mr *MockDatabasesServiceMockRecorder) InstallUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallUpdate", reflect.TypeOf((*MockDatabasesService)(nil).InstallUpdate), arg0, arg1)
}

// List mocks base method.
func (m *MockDatabasesService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Database, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Database)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDatabasesServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDatabasesService)(nil).List), arg0, arg1)
}

// ListBackups mocks base method.
func (m *MockDatabasesService) ListBackups(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseBackup, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseBackup)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockDatabasesServiceMockRecorder) ListBackups(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockDatabasesService)(nil).ListBackups), arg0, arg1, arg2)
}

// ListDBs mocks base method.
func (m *MockDatabasesService) ListDBs(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseDB, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDBs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseDB)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDBs indicates an expected call of ListDBs.
func (mr *MockDatabasesServiceMockRecorder) ListDBs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDBs", reflect.TypeOf((*MockDatabasesService)(nil).ListDBs), arg0, arg1, arg2)
}

// ListDatabaseEvents mocks base method.
func (m *MockDatabasesService) ListDatabaseEvents(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseEvent, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabaseEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseEvent)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDatabaseEvents indicates an expected call of ListDatabaseEvents.
func (mr *MockDatabasesServiceMockRecorder) ListDatabaseEvents(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseEvents", reflect.TypeOf((*MockDatabasesService)(nil).ListDatabaseEvents), arg0, arg1, arg2)
}

// ListIndexes mocks base method.
func (m *MockDatabasesService) ListIndexes(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseIndex, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseIndex)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIndexes indicates an expected call of ListIndexes.
func (mr *MockDatabasesServiceMockRecorder) ListIndexes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexes", reflect.TypeOf((*MockDatabasesService)(nil).ListIndexes), arg0, arg1, arg2)
}

// ListLogsinks mocks base method.
func (m *MockDatabasesService) ListLogsinks(ctx context.Context, databaseID string, opts *godo.ListOptions) ([]godo.DatabaseLogsink, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogsinks", ctx, databaseID, opts)
	ret0, _ := ret[0].([]godo.DatabaseLogsink)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLogsinks indicates an expected call of ListLogsinks.
func (mr *MockDatabasesServiceMockRecorder) ListLogsinks(ctx, databaseID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogsinks", reflect.TypeOf((*MockDatabasesService)(nil).ListLogsinks), ctx, databaseID, opts)
}

// ListOptions mocks base method.
func (m *MockDatabasesService) ListOptions(todo context.Context) (*godo.DatabaseOptions, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOptions", todo)
	ret0, _ := ret[0].(*godo.DatabaseOptions)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOptions indicates an expected call of ListOptions.
func (mr *MockDatabasesServiceMockRecorder) ListOptions(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOptions", reflect.TypeOf((*MockDatabasesService)(nil).ListOptions), todo)
}

// ListPools mocks base method.
func (m *MockDatabasesService) ListPools(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabasePool, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabasePool)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPools indicates an expected call of ListPools.
func (mr *MockDatabasesServiceMockRecorder) ListPools(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockDatabasesService)(nil).ListPools), arg0, arg1, arg2)
}

// ListReplicas mocks base method.
func (m *MockDatabasesService) ListReplicas(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseReplica, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplicas", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseReplica)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReplicas indicates an expected call of ListReplicas.
func (mr *MockDatabasesServiceMockRecorder) ListReplicas(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicas", reflect.TypeOf((*MockDatabasesService)(nil).ListReplicas), arg0, arg1, arg2)
}

// ListTopics mocks base method.
func (m *MockDatabasesService) ListTopics(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseTopic, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopics", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseTopic)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockDatabasesServiceMockRecorder) ListTopics(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockDatabasesService)(nil).ListTopics), arg0, arg1, arg2)
}

// ListUsers mocks base method.
func (m *MockDatabasesService) ListUsers(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DatabaseUser, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DatabaseUser)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockDatabasesServiceMockRecorder) ListUsers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockDatabasesService)(nil).ListUsers), arg0, arg1, arg2)
}

// Migrate mocks base method.
func (m *MockDatabasesService) Migrate(arg0 context.Context, arg1 string, arg2 *godo.DatabaseMigrateRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migrate indicates an expected call of Migrate.
func (mr *MockDatabasesServiceMockRecorder) Migrate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatabasesService)(nil).Migrate), arg0, arg1, arg2)
}

// PromoteReplicaToPrimary mocks base method.
func (m *MockDatabasesService) PromoteReplicaToPrimary(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteReplicaToPrimary", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteReplicaToPrimary indicates an expected call of PromoteReplicaToPrimary.
func (mr *MockDatabasesServiceMockRecorder) PromoteReplicaToPrimary(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteReplicaToPrimary", reflect.TypeOf((*MockDatabasesService)(nil).PromoteReplicaToPrimary), arg0, arg1, arg2)
}

// ResetUserAuth mocks base method.
func (m *MockDatabasesService) ResetUserAuth(arg0 context.Context, arg1, arg2 string, arg3 *godo.DatabaseResetUserAuthRequest) (*godo.DatabaseUser, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserAuth", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.DatabaseUser)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetUserAuth indicates an expected call of ResetUserAuth.
func (mr *MockDatabasesServiceMockRecorder) ResetUserAuth(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserAuth", reflect.TypeOf((*MockDatabasesService)(nil).ResetUserAuth), arg0, arg1, arg2, arg3)
}

// Resize mocks base method.
func (m *MockDatabasesService) Resize(arg0 context.Context, arg1 string, arg2 *godo.DatabaseResizeRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resize indicates an expected call of Resize.
func (mr *MockDatabasesServiceMockRecorder) Resize(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockDatabasesService)(nil).Resize), arg0, arg1, arg2)
}

// SetEvictionPolicy mocks base method.
func (m *MockDatabasesService) SetEvictionPolicy(arg0 context.Context, arg1, arg2 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEvictionPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEvictionPolicy indicates an expected call of SetEvictionPolicy.
func (mr *MockDatabasesServiceMockRecorder) SetEvictionPolicy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvictionPolicy", reflect.TypeOf((*MockDatabasesService)(nil).SetEvictionPolicy), arg0, arg1, arg2)
}

// SetSQLMode mocks base method.
func (m *MockDatabasesService) SetSQLMode(arg0 context.Context, arg1 string, arg2 ...string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSQLMode", varargs...)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSQLMode indicates an expected call of SetSQLMode.
func (mr *MockDatabasesServiceMockRecorder) SetSQLMode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSQLMode", reflect.TypeOf((*MockDatabasesService)(nil).SetSQLMode), varargs...)
}

// StartOnlineMigration mocks base method.
func (m *MockDatabasesService) StartOnlineMigration(ctx context.Context, databaseID string, onlineMigrationRequest *godo.DatabaseStartOnlineMigrationRequest) (*godo.DatabaseOnlineMigrationStatus, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOnlineMigration", ctx, databaseID, onlineMigrationRequest)
	ret0, _ := ret[0].(*godo.DatabaseOnlineMigrationStatus)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartOnlineMigration indicates an expected call of StartOnlineMigration.
func (mr *MockDatabasesServiceMockRecorder) StartOnlineMigration(ctx, databaseID, onlineMigrationRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnlineMigration", reflect.TypeOf((*MockDatabasesService)(nil).StartOnlineMigration), ctx, databaseID, onlineMigrationRequest)
}

// StopOnlineMigration mocks base method.
func (m *MockDatabasesService) StopOnlineMigration(ctx context.Context, databaseID, migrationID string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopOnlineMigration", ctx, databaseID, migrationID)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopOnlineMigration indicates an expected call of StopOnlineMigration.
func (mr *MockDatabasesServiceMockRecorder) StopOnlineMigration(ctx, databaseID, migrationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopOnlineMigration", reflect.TypeOf((*MockDatabasesService)(nil).StopOnlineMigration), ctx, databaseID, migrationID)
}

// UpdateFirewallRules mocks base method.
func (m *MockDatabasesService) UpdateFirewallRules(arg0 context.Context, arg1 string, arg2 *godo.DatabaseUpdateFirewallRulesRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirewallRules", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFirewallRules indicates an expected call of UpdateFirewallRules.
func (mr *MockDatabasesServiceMockRecorder) UpdateFirewallRules(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirewallRules", reflect.TypeOf((*MockDatabasesService)(nil).UpdateFirewallRules), arg0, arg1, arg2)
}

// UpdateKafkaConfig mocks base method.
func (m *MockDatabasesService) UpdateKafkaConfig(arg0 context.Context, arg1 string, arg2 *godo.KafkaConfig) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKafkaConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKafkaConfig indicates an expected call of UpdateKafkaConfig.
func (mr *MockDatabasesServiceMockRecorder) UpdateKafkaConfig(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKafkaConfig", reflect.TypeOf((*MockDatabasesService)(nil).UpdateKafkaConfig), arg0, arg1, arg2)
}

// UpdateLogsink mocks base method.
func (m *MockDatabasesService) UpdateLogsink(ctx context.Context, databaseID, logsinkID string, updateLogsink *godo.DatabaseUpdateLogsinkRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogsink", ctx, databaseID, logsinkID, updateLogsink)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogsink indicates an expected call of UpdateLogsink.
func (mr *MockDatabasesServiceMockRecorder) UpdateLogsink(ctx, databaseID, logsinkID, updateLogsink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogsink", reflect.TypeOf((*MockDatabasesService)(nil).UpdateLogsink), ctx, databaseID, logsinkID, updateLogsink)
}

// UpdateMaintenance mocks base method.
func (m *MockDatabasesService) UpdateMaintenance(arg0 context.Context, arg1 string, arg2 *godo.DatabaseUpdateMaintenanceRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaintenance", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaintenance indicates an expected call of UpdateMaintenance.
func (mr *MockDatabasesServiceMockRecorder) UpdateMaintenance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaintenance", reflect.TypeOf((*MockDatabasesService)(nil).UpdateMaintenance), arg0, arg1, arg2)
}

// UpdateMetricsCredentials mocks base method.
func (m *MockDatabasesService) UpdateMetricsCredentials(arg0 context.Context, arg1 *godo.DatabaseUpdateMetricsCredentialsRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricsCredentials", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricsCredentials indicates an expected call of UpdateMetricsCredentials.
func (mr *MockDatabasesServiceMockRecorder) UpdateMetricsCredentials(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsCredentials", reflect.TypeOf((*MockDatabasesService)(nil).UpdateMetricsCredentials), arg0, arg1)
}

// UpdateMongoDBConfig mocks base method.
func (m *MockDatabasesService) UpdateMongoDBConfig(arg0 context.Context, arg1 string, arg2 *godo.MongoDBConfig) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMongoDBConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMongoDBConfig indicates an expected call of UpdateMongoDBConfig.
func (mr *MockDatabasesServiceMockRecorder) UpdateMongoDBConfig(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMongoDBConfig", reflect.TypeOf((*MockDatabasesService)(nil).UpdateMongoDBConfig), arg0, arg1, arg2)
}

// UpdateMySQLConfig mocks base method.
func (m *MockDatabasesService) UpdateMySQLConfig(arg0 context.Context, arg1 string, arg2 *godo.MySQLConfig) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMySQLConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMySQLConfig indicates an expected call of UpdateMySQLConfig.
func (mr *MockDatabasesServiceMockRecorder) UpdateMySQLConfig(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMySQLConfig", reflect.TypeOf((*MockDatabasesService)(nil).UpdateMySQLConfig), arg0, arg1, arg2)
}

// UpdateOpensearchConfig mocks base method.
func (m *MockDatabasesService) UpdateOpensearchConfig(arg0 context.Context, arg1 string, arg2 *godo.OpensearchConfig) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpensearchConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpensearchConfig indicates an expected call of UpdateOpensearchConfig.
func (mr *MockDatabasesServiceMockRecorder) UpdateOpensearchConfig(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpensearchConfig", reflect.TypeOf((*MockDatabasesService)(nil).UpdateOpensearchConfig), arg0, arg1, arg2)
}

// UpdatePool mocks base method.
func (m *MockDatabasesService) UpdatePool(arg0 context.Context, arg1, arg2 string, arg3 *godo.DatabaseUpdatePoolRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockDatabasesServiceMockRecorder) UpdatePool(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockDatabasesService)(nil).UpdatePool), arg0, arg1, arg2, arg3)
}

// UpdatePostgreSQLConfig mocks base method.
func (m *MockDatabasesService) UpdatePostgreSQLConfig(arg0 context.Context, arg1 string, arg2 *godo.PostgreSQLConfig) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgreSQLConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePostgreSQLConfig indicates an expected call of UpdatePostgreSQLConfig.
func (mr *MockDatabasesServiceMockRecorder) UpdatePostgreSQLConfig(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgreSQLConfig", reflect.TypeOf((*MockDatabasesService)(nil).UpdatePostgreSQLConfig), arg0, arg1, arg2)
}

// UpdateRedisConfig mocks base method.
func (m *MockDatabasesService) UpdateRedisConfig(arg0 context.Context, arg1 string, arg2 *godo.RedisConfig) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRedisConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRedisConfig indicates an expected call of UpdateRedisConfig.
func (mr *MockDatabasesServiceMockRecorder) UpdateRedisConfig(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRedisConfig", reflect.TypeOf((*MockDatabasesService)(nil).UpdateRedisConfig), arg0, arg1, arg2)
}

// UpdateTopic mocks base method.
func (m *MockDatabasesService) UpdateTopic(arg0 context.Context, arg1, arg2 string, arg3 *godo.DatabaseUpdateTopicRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopic", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopic indicates an expected call of UpdateTopic.
func (mr *MockDatabasesServiceMockRecorder) UpdateTopic(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopic", reflect.TypeOf((*MockDatabasesService)(nil).UpdateTopic), arg0, arg1, arg2, arg3)
}

// UpdateUser mocks base method.
func (m *MockDatabasesService) UpdateUser(arg0 context.Context, arg1, arg2 string, arg3 *godo.DatabaseUpdateUserRequest) (*godo.DatabaseUser, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.DatabaseUser)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDatabasesServiceMockRecorder) UpdateUser(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabasesService)(nil).UpdateUser), arg0, arg1, arg2, arg3)
}

// UpgradeMajorVersion mocks base method.
func (m *MockDatabasesService) UpgradeMajorVersion(arg0 context.Context, arg1 string, arg2 *godo.UpgradeVersionRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeMajorVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeMajorVersion indicates an expected call of UpgradeMajorVersion.
func (mr *MockDatabasesServiceMockRecorder) UpgradeMajorVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeMajorVersion", reflect.TypeOf((*MockDatabasesService)(nil).UpgradeMajorVersion), arg0, arg1, arg2)
}
