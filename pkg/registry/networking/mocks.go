// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: CertificatesService,DomainsService,FirewallsService,PartnerAttachmentService,ReservedIPsService,ReservedIPV6sService,ReservedIPActionsService,ReservedIPV6ActionsService,VPCsService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package networking github.com/digitalocean/godo CertificatesService,DomainsService,FirewallsService,PartnerAttachmentService,ReservedIPsService,ReservedIPV6sService,ReservedIPActionsService,ReservedIPV6ActionsService,VPCsService
//

// Package networking is a generated GoMock package.
package networking

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockCertificatesService is a mock of CertificatesService interface.
type MockCertificatesService struct {
	ctrl     *gomock.Controller
	recorder *MockCertificatesServiceMockRecorder
}

// MockCertificatesServiceMockRecorder is the mock recorder for MockCertificatesService.
type MockCertificatesServiceMockRecorder struct {
	mock *MockCertificatesService
}

// NewMockCertificatesService creates a new mock instance.
func NewMockCertificatesService(ctrl *gomock.Controller) *MockCertificatesService {
	mock := &MockCertificatesService{ctrl: ctrl}
	mock.recorder = &MockCertificatesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificatesService) EXPECT() *MockCertificatesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCertificatesService) Create(arg0 context.Context, arg1 *godo.CertificateRequest) (*godo.Certificate, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Certificate)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockCertificatesServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCertificatesService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCertificatesService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCertificatesServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificatesService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockCertificatesService) Get(arg0 context.Context, arg1 string) (*godo.Certificate, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Certificate)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCertificatesServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCertificatesService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockCertificatesService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Certificate, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Certificate)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCertificatesServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificatesService)(nil).List), arg0, arg1)
}

// ListByName mocks base method.
func (m *MockCertificatesService) ListByName(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Certificate, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Certificate)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByName indicates an expected call of ListByName.
func (mr *MockCertificatesServiceMockRecorder) ListByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockCertificatesService)(nil).ListByName), arg0, arg1, arg2)
}

// MockDomainsService is a mock of DomainsService interface.
type MockDomainsService struct {
	ctrl     *gomock.Controller
	recorder *MockDomainsServiceMockRecorder
}

// MockDomainsServiceMockRecorder is the mock recorder for MockDomainsService.
type MockDomainsServiceMockRecorder struct {
	mock *MockDomainsService
}

// NewMockDomainsService creates a new mock instance.
func NewMockDomainsService(ctrl *gomock.Controller) *MockDomainsService {
	mock := &MockDomainsService{ctrl: ctrl}
	mock.recorder = &MockDomainsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainsService) EXPECT() *MockDomainsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDomainsService) Create(arg0 context.Context, arg1 *godo.DomainCreateRequest) (*godo.Domain, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Domain)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDomainsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDomainsService)(nil).Create), arg0, arg1)
}

// CreateRecord mocks base method.
func (m *MockDomainsService) CreateRecord(arg0 context.Context, arg1 string, arg2 *godo.DomainRecordEditRequest) (*godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockDomainsServiceMockRecorder) CreateRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockDomainsService)(nil).CreateRecord), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockDomainsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainsService)(nil).Delete), arg0, arg1)
}

// DeleteRecord mocks base method.
func (m *MockDomainsService) DeleteRecord(arg0 context.Context, arg1 string, arg2 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockDomainsServiceMockRecorder) DeleteRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockDomainsService)(nil).DeleteRecord), arg0, arg1, arg2)
}

// EditRecord mocks base method.
func (m *MockDomainsService) EditRecord(arg0 context.Context, arg1 string, arg2 int, arg3 *godo.DomainRecordEditRequest) (*godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditRecord indicates an expected call of EditRecord.
func (mr *MockDomainsServiceMockRecorder) EditRecord(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRecord", reflect.TypeOf((*MockDomainsService)(nil).EditRecord), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockDomainsService) Get(arg0 context.Context, arg1 string) (*godo.Domain, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Domain)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDomainsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomainsService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockDomainsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Domain, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Domain)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDomainsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDomainsService)(nil).List), arg0, arg1)
}

// Record mocks base method.
func (m *MockDomainsService) Record(arg0 context.Context, arg1 string, arg2 int) (*godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Record indicates an expected call of Record.
func (mr *MockDomainsServiceMockRecorder) Record(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockDomainsService)(nil).Record), arg0, arg1, arg2)
}

// Records mocks base method.
func (m *MockDomainsService) Records(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Records", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Records indicates an expected call of Records.
func (mr *MockDomainsServiceMockRecorder) Records(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Records", reflect.TypeOf((*MockDomainsService)(nil).Records), arg0, arg1, arg2)
}

// RecordsByName mocks base method.
func (m *MockDomainsService) RecordsByName(arg0 context.Context, arg1, arg2 string, arg3 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RecordsByName indicates an expected call of RecordsByName.
func (mr *MockDomainsServiceMockRecorder) RecordsByName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsByName", reflect.TypeOf((*MockDomainsService)(nil).RecordsByName), arg0, arg1, arg2, arg3)
}

// RecordsByType mocks base method.
func (m *MockDomainsService) RecordsByType(arg0 context.Context, arg1, arg2 string, arg3 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsByType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RecordsByType indicates an expected call of RecordsByType.
func (mr *MockDomainsServiceMockRecorder) RecordsByType(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsByType", reflect.TypeOf((*MockDomainsService)(nil).RecordsByType), arg0, arg1, arg2, arg3)
}

// RecordsByTypeAndName mocks base method.
func (m *MockDomainsService) RecordsByTypeAndName(arg0 context.Context, arg1, arg2, arg3 string, arg4 *godo.ListOptions) ([]godo.DomainRecord, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsByTypeAndName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]godo.DomainRecord)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RecordsByTypeAndName indicates an expected call of RecordsByTypeAndName.
func (mr *MockDomainsServiceMockRecorder) RecordsByTypeAndName(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsByTypeAndName", reflect.TypeOf((*MockDomainsService)(nil).RecordsByTypeAndName), arg0, arg1, arg2, arg3, arg4)
}

// MockFirewallsService is a mock of FirewallsService interface.
type MockFirewallsService struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallsServiceMockRecorder
}

// MockFirewallsServiceMockRecorder is the mock recorder for MockFirewallsService.
type MockFirewallsServiceMockRecorder struct {
	mock *MockFirewallsService
}

// NewMockFirewallsService creates a new mock instance.
func NewMockFirewallsService(ctrl *gomock.Controller) *MockFirewallsService {
	mock := &MockFirewallsService{ctrl: ctrl}
	mock.recorder = &MockFirewallsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallsService) EXPECT() *MockFirewallsServiceMockRecorder {
	return m.recorder
}

// AddDroplets mocks base method.
func (m *MockFirewallsService) AddDroplets(arg0 context.Context, arg1 string, arg2 ...int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDroplets", varargs...)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDroplets indicates an expected call of AddDroplets.
func (mr *MockFirewallsServiceMockRecorder) AddDroplets(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDroplets", reflect.TypeOf((*MockFirewallsService)(nil).AddDroplets), varargs...)
}

// AddRules mocks base method.
func (m *MockFirewallsService) AddRules(arg0 context.Context, arg1 string, arg2 *godo.FirewallRulesRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRules", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRules indicates an expected call of AddRules.
func (mr *MockFirewallsServiceMockRecorder) AddRules(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRules", reflect.TypeOf((*MockFirewallsService)(nil).AddRules), arg0, arg1, arg2)
}

// AddTags mocks base method.
func (m *MockFirewallsService) AddTags(arg0 context.Context, arg1 string, arg2 ...string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTags", varargs...)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTags indicates an expected call of AddTags.
func (mr *MockFirewallsServiceMockRecorder) AddTags(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockFirewallsService)(nil).AddTags), varargs...)
}

// Create mocks base method.
func (m *MockFirewallsService) Create(arg0 context.Context, arg1 *godo.FirewallRequest) (*godo.Firewall, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Firewall)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockFirewallsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFirewallsService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockFirewallsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFirewallsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallsService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockFirewallsService) Get(arg0 context.Context, arg1 string) (*godo.Firewall, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Firewall)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockFirewallsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallsService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockFirewallsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Firewall, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Firewall)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFirewallsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallsService)(nil).List), arg0, arg1)
}

// ListByDroplet mocks base method.
func (m *MockFirewallsService) ListByDroplet(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Firewall, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDroplet", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Firewall)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByDroplet indicates an expected call of ListByDroplet.
func (mr *MockFirewallsServiceMockRecorder) ListByDroplet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDroplet", reflect.TypeOf((*MockFirewallsService)(nil).ListByDroplet), arg0, arg1, arg2)
}

// RemoveDroplets mocks base method.
func (m *MockFirewallsService) RemoveDroplets(arg0 context.Context, arg1 string, arg2 ...int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveDroplets", varargs...)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDroplets indicates an expected call of RemoveDroplets.
func (mr *MockFirewallsServiceMockRecorder) RemoveDroplets(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDroplets", reflect.TypeOf((*MockFirewallsService)(nil).RemoveDroplets), varargs...)
}

// RemoveRules mocks base method.
func (m *MockFirewallsService) RemoveRules(arg0 context.Context, arg1 string, arg2 *godo.FirewallRulesRequest) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRules", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRules indicates an expected call of RemoveRules.
func (mr *MockFirewallsServiceMockRecorder) RemoveRules(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRules", reflect.TypeOf((*MockFirewallsService)(nil).RemoveRules), arg0, arg1, arg2)
}

// RemoveTags mocks base method.
func (m *MockFirewallsService) RemoveTags(arg0 context.Context, arg1 string, arg2 ...string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTags", varargs...)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTags indicates an expected call of RemoveTags.
func (mr *MockFirewallsServiceMockRecorder) RemoveTags(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTags", reflect.TypeOf((*MockFirewallsService)(nil).RemoveTags), varargs...)
}

// Update mocks base method.
func (m *MockFirewallsService) Update(arg0 context.Context, arg1 string, arg2 *godo.FirewallRequest) (*godo.Firewall, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Firewall)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockFirewallsServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFirewallsService)(nil).Update), arg0, arg1, arg2)
}

// MockPartnerAttachmentService is a mock of PartnerAttachmentService interface.
type MockPartnerAttachmentService struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerAttachmentServiceMockRecorder
}

// MockPartnerAttachmentServiceMockRecorder is the mock recorder for MockPartnerAttachmentService.
type MockPartnerAttachmentServiceMockRecorder struct {
	mock *MockPartnerAttachmentService
}

// NewMockPartnerAttachmentService creates a new mock instance.
func NewMockPartnerAttachmentService(ctrl *gomock.Controller) *MockPartnerAttachmentService {
	mock := &MockPartnerAttachmentService{ctrl: ctrl}
	mock.recorder = &MockPartnerAttachmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerAttachmentService) EXPECT() *MockPartnerAttachmentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPartnerAttachmentService) Create(arg0 context.Context, arg1 *godo.PartnerAttachmentCreateRequest) (*godo.PartnerAttachment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.PartnerAttachment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPartnerAttachmentServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPartnerAttachmentService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPartnerAttachmentService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPartnerAttachmentServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPartnerAttachmentService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPartnerAttachmentService) Get(arg0 context.Context, arg1 string) (*godo.PartnerAttachment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.PartnerAttachment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPartnerAttachmentServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPartnerAttachmentService)(nil).Get), arg0, arg1)
}

// GetBGPAuthKey mocks base method.
func (m *MockPartnerAttachmentService) GetBGPAuthKey(arg0 context.Context, arg1 string) (*godo.BgpAuthKey, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBGPAuthKey", arg0, arg1)
	ret0, _ := ret[0].(*godo.BgpAuthKey)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBGPAuthKey indicates an expected call of GetBGPAuthKey.
func (mr *MockPartnerAttachmentServiceMockRecorder) GetBGPAuthKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBGPAuthKey", reflect.TypeOf((*MockPartnerAttachmentService)(nil).GetBGPAuthKey), arg0, arg1)
}

// GetServiceKey mocks base method.
func (m *MockPartnerAttachmentService) GetServiceKey(arg0 context.Context, arg1 string) (*godo.ServiceKey, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceKey", arg0, arg1)
	ret0, _ := ret[0].(*godo.ServiceKey)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceKey indicates an expected call of GetServiceKey.
func (mr *MockPartnerAttachmentServiceMockRecorder) GetServiceKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceKey", reflect.TypeOf((*MockPartnerAttachmentService)(nil).GetServiceKey), arg0, arg1)
}

// List mocks base method.
func (m *MockPartnerAttachmentService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]*godo.PartnerAttachment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*godo.PartnerAttachment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPartnerAttachmentServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPartnerAttachmentService)(nil).List), arg0, arg1)
}

// ListRoutes mocks base method.
func (m *MockPartnerAttachmentService) ListRoutes(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]*godo.RemoteRoute, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*godo.RemoteRoute)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockPartnerAttachmentServiceMockRecorder) ListRoutes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockPartnerAttachmentService)(nil).ListRoutes), arg0, arg1, arg2)
}

// RegenerateServiceKey mocks base method.
func (m *MockPartnerAttachmentService) RegenerateServiceKey(arg0 context.Context, arg1 string) (*godo.RegenerateServiceKey, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateServiceKey", arg0, arg1)
	ret0, _ := ret[0].(*godo.RegenerateServiceKey)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegenerateServiceKey indicates an expected call of RegenerateServiceKey.
func (mr *MockPartnerAttachmentServiceMockRecorder) RegenerateServiceKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateServiceKey", reflect.TypeOf((*MockPartnerAttachmentService)(nil).RegenerateServiceKey), arg0, arg1)
}

// SetRoutes mocks base method.
func (m *MockPartnerAttachmentService) SetRoutes(arg0 context.Context, arg1 string, arg2 *godo.PartnerAttachmentSetRoutesRequest) (*godo.PartnerAttachment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRoutes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.PartnerAttachment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetRoutes indicates an expected call of SetRoutes.
func (mr *MockPartnerAttachmentServiceMockRecorder) SetRoutes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoutes", reflect.TypeOf((*MockPartnerAttachmentService)(nil).SetRoutes), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockPartnerAttachmentService) Update(arg0 context.Context, arg1 string, arg2 *godo.PartnerAttachmentUpdateRequest) (*godo.PartnerAttachment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.PartnerAttachment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockPartnerAttachmentServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPartnerAttachmentService)(nil).Update), arg0, arg1, arg2)
}

// MockReservedIPsService is a mock of ReservedIPsService interface.
type MockReservedIPsService struct {
	ctrl     *gomock.Controller
	recorder *MockReservedIPsServiceMockRecorder
}

// MockReservedIPsServiceMockRecorder is the mock recorder for MockReservedIPsService.
type MockReservedIPsServiceMockRecorder struct {
	mock *MockReservedIPsService
}

// NewMockReservedIPsService creates a new mock instance.
func NewMockReservedIPsService(ctrl *gomock.Controller) *MockReservedIPsService {
	mock := &MockReservedIPsService{ctrl: ctrl}
	mock.recorder = &MockReservedIPsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservedIPsService) EXPECT() *MockReservedIPsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReservedIPsService) Create(arg0 context.Context, arg1 *godo.ReservedIPCreateRequest) (*godo.ReservedIP, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.ReservedIP)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockReservedIPsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReservedIPsService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockReservedIPsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockReservedIPsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReservedIPsService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockReservedIPsService) Get(arg0 context.Context, arg1 string) (*godo.ReservedIP, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.ReservedIP)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockReservedIPsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReservedIPsService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockReservedIPsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.ReservedIP, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.ReservedIP)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockReservedIPsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReservedIPsService)(nil).List), arg0, arg1)
}

// MockReservedIPV6sService is a mock of ReservedIPV6sService interface.
type MockReservedIPV6sService struct {
	ctrl     *gomock.Controller
	recorder *MockReservedIPV6sServiceMockRecorder
}

// MockReservedIPV6sServiceMockRecorder is the mock recorder for MockReservedIPV6sService.
type MockReservedIPV6sServiceMockRecorder struct {
	mock *MockReservedIPV6sService
}

// NewMockReservedIPV6sService creates a new mock instance.
func NewMockReservedIPV6sService(ctrl *gomock.Controller) *MockReservedIPV6sService {
	mock := &MockReservedIPV6sService{ctrl: ctrl}
	mock.recorder = &MockReservedIPV6sServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservedIPV6sService) EXPECT() *MockReservedIPV6sServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReservedIPV6sService) Create(arg0 context.Context, arg1 *godo.ReservedIPV6CreateRequest) (*godo.ReservedIPV6, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.ReservedIPV6)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockReservedIPV6sServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReservedIPV6sService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockReservedIPV6sService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockReservedIPV6sServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReservedIPV6sService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockReservedIPV6sService) Get(arg0 context.Context, arg1 string) (*godo.ReservedIPV6, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.ReservedIPV6)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockReservedIPV6sServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReservedIPV6sService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockReservedIPV6sService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.ReservedIPV6, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.ReservedIPV6)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockReservedIPV6sServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReservedIPV6sService)(nil).List), arg0, arg1)
}

// MockReservedIPActionsService is a mock of ReservedIPActionsService interface.
type MockReservedIPActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockReservedIPActionsServiceMockRecorder
}

// MockReservedIPActionsServiceMockRecorder is the mock recorder for MockReservedIPActionsService.
type MockReservedIPActionsServiceMockRecorder struct {
	mock *MockReservedIPActionsService
}

// NewMockReservedIPActionsService creates a new mock instance.
func NewMockReservedIPActionsService(ctrl *gomock.Controller) *MockReservedIPActionsService {
	mock := &MockReservedIPActionsService{ctrl: ctrl}
	mock.recorder = &MockReservedIPActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservedIPActionsService) EXPECT() *MockReservedIPActionsServiceMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockReservedIPActionsService) Assign(arg0 context.Context, arg1 string, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Assign indicates an expected call of Assign.
func (mr *MockReservedIPActionsServiceMockRecorder) Assign(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockReservedIPActionsService)(nil).Assign), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockReservedIPActionsService) Get(arg0 context.Context, arg1 string, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockReservedIPActionsServiceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReservedIPActionsService)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockReservedIPActionsService) List(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockReservedIPActionsServiceMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReservedIPActionsService)(nil).List), arg0, arg1, arg2)
}

// Unassign mocks base method.
func (m *MockReservedIPActionsService) Unassign(arg0 context.Context, arg1 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Unassign indicates an expected call of Unassign.
func (mr *MockReservedIPActionsServiceMockRecorder) Unassign(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*MockReservedIPActionsService)(nil).Unassign), arg0, arg1)
}

// MockReservedIPV6ActionsService is a mock of ReservedIPV6ActionsService interface.
type MockReservedIPV6ActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockReservedIPV6ActionsServiceMockRecorder
}

// MockReservedIPV6ActionsServiceMockRecorder is the mock recorder for MockReservedIPV6ActionsService.
type MockReservedIPV6ActionsServiceMockRecorder struct {
	mock *MockReservedIPV6ActionsService
}

// NewMockReservedIPV6ActionsService creates a new mock instance.
func NewMockReservedIPV6ActionsService(ctrl *gomock.Controller) *MockReservedIPV6ActionsService {
	mock := &MockReservedIPV6ActionsService{ctrl: ctrl}
	mock.recorder = &MockReservedIPV6ActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservedIPV6ActionsService) EXPECT() *MockReservedIPV6ActionsServiceMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockReservedIPV6ActionsService) Assign(arg0 context.Context, arg1 string, arg2 int) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Assign indicates an expected call of Assign.
func (mr *MockReservedIPV6ActionsServiceMockRecorder) Assign(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockReservedIPV6ActionsService)(nil).Assign), arg0, arg1, arg2)
}

// Unassign mocks base method.
func (m *MockReservedIPV6ActionsService) Unassign(arg0 context.Context, arg1 string) (*godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign", arg0, arg1)
	ret0, _ := ret[0].(*godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Unassign indicates an expected call of Unassign.
func (mr *MockReservedIPV6ActionsServiceMockRecorder) Unassign(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*MockReservedIPV6ActionsService)(nil).Unassign), arg0, arg1)
}

// MockVPCsService is a mock of VPCsService interface.
type MockVPCsService struct {
	ctrl     *gomock.Controller
	recorder *MockVPCsServiceMockRecorder
}

// MockVPCsServiceMockRecorder is the mock recorder for MockVPCsService.
type MockVPCsServiceMockRecorder struct {
	mock *MockVPCsService
}

// NewMockVPCsService creates a new mock instance.
func NewMockVPCsService(ctrl *gomock.Controller) *MockVPCsService {
	mock := &MockVPCsService{ctrl: ctrl}
	mock.recorder = &MockVPCsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCsService) EXPECT() *MockVPCsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVPCsService) Create(arg0 context.Context, arg1 *godo.VPCCreateRequest) (*godo.VPC, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.VPC)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockVPCsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVPCsService)(nil).Create), arg0, arg1)
}

// CreateVPCPeering mocks base method.
func (m *MockVPCsService) CreateVPCPeering(arg0 context.Context, arg1 *godo.VPCPeeringCreateRequest) (*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPCPeering", arg0, arg1)
	ret0, _ := ret[0].(*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVPCPeering indicates an expected call of CreateVPCPeering.
func (mr *MockVPCsServiceMockRecorder) CreateVPCPeering(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).CreateVPCPeering), arg0, arg1)
}

// CreateVPCPeeringByVPCID mocks base method.
func (m *MockVPCsService) CreateVPCPeeringByVPCID(arg0 context.Context, arg1 string, arg2 *godo.VPCPeeringCreateRequestByVPCID) (*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPCPeeringByVPCID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVPCPeeringByVPCID indicates an expected call of CreateVPCPeeringByVPCID.
func (mr *MockVPCsServiceMockRecorder) CreateVPCPeeringByVPCID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPCPeeringByVPCID", reflect.TypeOf((*MockVPCsService)(nil).CreateVPCPeeringByVPCID), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockVPCsService) Delete(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVPCsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVPCsService)(nil).Delete), arg0, arg1)
}

// DeleteVPCPeering mocks base method.
func (m *MockVPCsService) DeleteVPCPeering(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPCPeering", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPCPeering indicates an expected call of DeleteVPCPeering.
func (mr *MockVPCsServiceMockRecorder) DeleteVPCPeering(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).DeleteVPCPeering), arg0, arg1)
}

// Get mocks base method.
func (m *MockVPCsService) Get(arg0 context.Context, arg1 string) (*godo.VPC, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.VPC)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockVPCsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVPCsService)(nil).Get), arg0, arg1)
}

// GetVPCPeering mocks base method.
func (m *MockVPCsService) GetVPCPeering(arg0 context.Context, arg1 string) (*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCPeering", arg0, arg1)
	ret0, _ := ret[0].(*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVPCPeering indicates an expected call of GetVPCPeering.
func (mr *MockVPCsServiceMockRecorder) GetVPCPeering(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).GetVPCPeering), arg0, arg1)
}

// List mocks base method.
func (m *MockVPCsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]*godo.VPC, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*godo.VPC)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockVPCsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVPCsService)(nil).List), arg0, arg1)
}

// ListMembers mocks base method.
func (m *MockVPCsService) ListMembers(arg0 context.Context, arg1 string, arg2 *godo.VPCListMembersRequest, arg3 *godo.ListOptions) ([]*godo.VPCMember, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*godo.VPCMember)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockVPCsServiceMockRecorder) ListMembers(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockVPCsService)(nil).ListMembers), arg0, arg1, arg2, arg3)
}

// ListVPCPeerings mocks base method.
func (m *MockVPCsService) ListVPCPeerings(arg0 context.Context, arg1 *godo.ListOptions) ([]*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCPeerings", arg0, arg1)
	ret0, _ := ret[0].([]*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVPCPeerings indicates an expected call of ListVPCPeerings.
func (mr *MockVPCsServiceMockRecorder) ListVPCPeerings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCPeerings", reflect.TypeOf((*MockVPCsService)(nil).ListVPCPeerings), arg0, arg1)
}

// ListVPCPeeringsByVPCID mocks base method.
func (m *MockVPCsService) ListVPCPeeringsByVPCID(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCPeeringsByVPCID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVPCPeeringsByVPCID indicates an expected call of ListVPCPeeringsByVPCID.
func (mr *MockVPCsServiceMockRecorder) ListVPCPeeringsByVPCID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCPeeringsByVPCID", reflect.TypeOf((*MockVPCsService)(nil).ListVPCPeeringsByVPCID), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockVPCsService) Set(arg0 context.Context, arg1 string, arg2 ...godo.VPCSetField) (*godo.VPC, *godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*godo.VPC)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Set indicates an expected call of Set.
func (mr *MockVPCsServiceMockRecorder) Set(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockVPCsService)(nil).Set), varargs...)
}

// Update mocks base method.
func (m *MockVPCsService) Update(arg0 context.Context, arg1 string, arg2 *godo.VPCUpdateRequest) (*godo.VPC, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.VPC)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockVPCsServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVPCsService)(nil).Update), arg0, arg1, arg2)
}

// UpdateVPCPeering mocks base method.
func (m *MockVPCsService) UpdateVPCPeering(arg0 context.Context, arg1 string, arg2 *godo.VPCPeeringUpdateRequest) (*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVPCPeering", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVPCPeering indicates an expected call of UpdateVPCPeering.
func (mr *MockVPCsServiceMockRecorder) UpdateVPCPeering(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVPCPeering", reflect.TypeOf((*MockVPCsService)(nil).UpdateVPCPeering), arg0, arg1, arg2)
}

// UpdateVPCPeeringByVPCID mocks base method.
func (m *MockVPCsService) UpdateVPCPeeringByVPCID(arg0 context.Context, arg1, arg2 string, arg3 *godo.VPCPeeringUpdateRequest) (*godo.VPCPeering, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVPCPeeringByVPCID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*godo.VPCPeering)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVPCPeeringByVPCID indicates an expected call of UpdateVPCPeeringByVPCID.
func (mr *MockVPCsServiceMockRecorder) UpdateVPCPeeringByVPCID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVPCPeeringByVPCID", reflect.TypeOf((*MockVPCsService)(nil).UpdateVPCPeeringByVPCID), arg0, arg1, arg2, arg3)
}
