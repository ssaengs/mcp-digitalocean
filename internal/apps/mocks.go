// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: AppsService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package apps github.com/digitalocean/godo AppsService
//

// Package apps is a generated GoMock package.
package apps

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockAppsService is a mock of AppsService interface.
type MockAppsService struct {
	ctrl     *gomock.Controller
	recorder *MockAppsServiceMockRecorder
	isgomock struct{}
}

// MockAppsServiceMockRecorder is the mock recorder for MockAppsService.
type MockAppsServiceMockRecorder struct {
	mock *MockAppsService
}

// NewMockAppsService creates a new mock instance.
func NewMockAppsService(ctrl *gomock.Controller) *MockAppsService {
	mock := &MockAppsService{ctrl: ctrl}
	mock.recorder = &MockAppsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppsService) EXPECT() *MockAppsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAppsService) Create(ctx context.Context, create *godo.AppCreateRequest) (*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create)
	ret0, _ := ret[0].(*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockAppsServiceMockRecorder) Create(ctx, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppsService)(nil).Create), ctx, create)
}

// CreateDeployment mocks base method.
func (m *MockAppsService) CreateDeployment(ctx context.Context, appID string, create ...*godo.DeploymentCreateRequest) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, appID}
	for _, a := range create {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeployment", varargs...)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockAppsServiceMockRecorder) CreateDeployment(ctx, appID any, create ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, appID}, create...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockAppsService)(nil).CreateDeployment), varargs...)
}

// Delete mocks base method.
func (m *MockAppsService) Delete(ctx context.Context, appID string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, appID)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAppsServiceMockRecorder) Delete(ctx, appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppsService)(nil).Delete), ctx, appID)
}

// Detect mocks base method.
func (m *MockAppsService) Detect(ctx context.Context, detect *godo.DetectRequest) (*godo.DetectResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect", ctx, detect)
	ret0, _ := ret[0].(*godo.DetectResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Detect indicates an expected call of Detect.
func (mr *MockAppsServiceMockRecorder) Detect(ctx, detect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockAppsService)(nil).Detect), ctx, detect)
}

// Get mocks base method.
func (m *MockAppsService) Get(ctx context.Context, appID string) (*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, appID)
	ret0, _ := ret[0].(*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAppsServiceMockRecorder) Get(ctx, appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppsService)(nil).Get), ctx, appID)
}

// GetAppDatabaseConnectionDetails mocks base method.
func (m *MockAppsService) GetAppDatabaseConnectionDetails(ctx context.Context, appID string) ([]*godo.GetDatabaseConnectionDetailsResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppDatabaseConnectionDetails", ctx, appID)
	ret0, _ := ret[0].([]*godo.GetDatabaseConnectionDetailsResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppDatabaseConnectionDetails indicates an expected call of GetAppDatabaseConnectionDetails.
func (mr *MockAppsServiceMockRecorder) GetAppDatabaseConnectionDetails(ctx, appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppDatabaseConnectionDetails", reflect.TypeOf((*MockAppsService)(nil).GetAppDatabaseConnectionDetails), ctx, appID)
}

// GetAppHealth mocks base method.
func (m *MockAppsService) GetAppHealth(ctx context.Context, appID string) (*godo.AppHealth, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppHealth", ctx, appID)
	ret0, _ := ret[0].(*godo.AppHealth)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppHealth indicates an expected call of GetAppHealth.
func (mr *MockAppsServiceMockRecorder) GetAppHealth(ctx, appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppHealth", reflect.TypeOf((*MockAppsService)(nil).GetAppHealth), ctx, appID)
}

// GetAppInstances mocks base method.
func (m *MockAppsService) GetAppInstances(ctx context.Context, appID string, opts *godo.GetAppInstancesOpts) ([]*godo.AppInstance, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInstances", ctx, appID, opts)
	ret0, _ := ret[0].([]*godo.AppInstance)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppInstances indicates an expected call of GetAppInstances.
func (mr *MockAppsServiceMockRecorder) GetAppInstances(ctx, appID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInstances", reflect.TypeOf((*MockAppsService)(nil).GetAppInstances), ctx, appID, opts)
}

// GetDeployment mocks base method.
func (m *MockAppsService) GetDeployment(ctx context.Context, appID, deploymentID string) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, appID, deploymentID)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockAppsServiceMockRecorder) GetDeployment(ctx, appID, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockAppsService)(nil).GetDeployment), ctx, appID, deploymentID)
}

// GetExec mocks base method.
func (m *MockAppsService) GetExec(ctx context.Context, appID, deploymentID, component string) (*godo.AppExec, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExec", ctx, appID, deploymentID, component)
	ret0, _ := ret[0].(*godo.AppExec)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExec indicates an expected call of GetExec.
func (mr *MockAppsServiceMockRecorder) GetExec(ctx, appID, deploymentID, component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExec", reflect.TypeOf((*MockAppsService)(nil).GetExec), ctx, appID, deploymentID, component)
}

// GetExecWithOpts mocks base method.
func (m *MockAppsService) GetExecWithOpts(ctx context.Context, appID, componentName string, opts *godo.AppGetExecOptions) (*godo.AppExec, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecWithOpts", ctx, appID, componentName, opts)
	ret0, _ := ret[0].(*godo.AppExec)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExecWithOpts indicates an expected call of GetExecWithOpts.
func (mr *MockAppsServiceMockRecorder) GetExecWithOpts(ctx, appID, componentName, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecWithOpts", reflect.TypeOf((*MockAppsService)(nil).GetExecWithOpts), ctx, appID, componentName, opts)
}

// GetInstanceSize mocks base method.
func (m *MockAppsService) GetInstanceSize(ctx context.Context, slug string) (*godo.AppInstanceSize, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSize", ctx, slug)
	ret0, _ := ret[0].(*godo.AppInstanceSize)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSize indicates an expected call of GetInstanceSize.
func (mr *MockAppsServiceMockRecorder) GetInstanceSize(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSize", reflect.TypeOf((*MockAppsService)(nil).GetInstanceSize), ctx, slug)
}

// GetLogs mocks base method.
func (m *MockAppsService) GetLogs(ctx context.Context, appID, deploymentID, component string, logType godo.AppLogType, follow bool, tailLines int) (*godo.AppLogs, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, appID, deploymentID, component, logType, follow, tailLines)
	ret0, _ := ret[0].(*godo.AppLogs)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockAppsServiceMockRecorder) GetLogs(ctx, appID, deploymentID, component, logType, follow, tailLines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAppsService)(nil).GetLogs), ctx, appID, deploymentID, component, logType, follow, tailLines)
}

// GetTier mocks base method.
func (m *MockAppsService) GetTier(ctx context.Context, slug string) (*godo.AppTier, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTier", ctx, slug)
	ret0, _ := ret[0].(*godo.AppTier)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTier indicates an expected call of GetTier.
func (mr *MockAppsServiceMockRecorder) GetTier(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTier", reflect.TypeOf((*MockAppsService)(nil).GetTier), ctx, slug)
}

// List mocks base method.
func (m *MockAppsService) List(ctx context.Context, opts *godo.ListOptions) ([]*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAppsServiceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppsService)(nil).List), ctx, opts)
}

// ListAlerts mocks base method.
func (m *MockAppsService) ListAlerts(ctx context.Context, appID string) ([]*godo.AppAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlerts", ctx, appID)
	ret0, _ := ret[0].([]*godo.AppAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlerts indicates an expected call of ListAlerts.
func (mr *MockAppsServiceMockRecorder) ListAlerts(ctx, appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlerts", reflect.TypeOf((*MockAppsService)(nil).ListAlerts), ctx, appID)
}

// ListBuildpacks mocks base method.
func (m *MockAppsService) ListBuildpacks(ctx context.Context) ([]*godo.Buildpack, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuildpacks", ctx)
	ret0, _ := ret[0].([]*godo.Buildpack)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBuildpacks indicates an expected call of ListBuildpacks.
func (mr *MockAppsServiceMockRecorder) ListBuildpacks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildpacks", reflect.TypeOf((*MockAppsService)(nil).ListBuildpacks), ctx)
}

// ListDeployments mocks base method.
func (m *MockAppsService) ListDeployments(ctx context.Context, appID string, opts *godo.ListOptions) ([]*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", ctx, appID, opts)
	ret0, _ := ret[0].([]*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockAppsServiceMockRecorder) ListDeployments(ctx, appID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockAppsService)(nil).ListDeployments), ctx, appID, opts)
}

// ListInstanceSizes mocks base method.
func (m *MockAppsService) ListInstanceSizes(ctx context.Context) ([]*godo.AppInstanceSize, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceSizes", ctx)
	ret0, _ := ret[0].([]*godo.AppInstanceSize)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstanceSizes indicates an expected call of ListInstanceSizes.
func (mr *MockAppsServiceMockRecorder) ListInstanceSizes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceSizes", reflect.TypeOf((*MockAppsService)(nil).ListInstanceSizes), ctx)
}

// ListRegions mocks base method.
func (m *MockAppsService) ListRegions(ctx context.Context) ([]*godo.AppRegion, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx)
	ret0, _ := ret[0].([]*godo.AppRegion)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockAppsServiceMockRecorder) ListRegions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockAppsService)(nil).ListRegions), ctx)
}

// ListTiers mocks base method.
func (m *MockAppsService) ListTiers(ctx context.Context) ([]*godo.AppTier, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTiers", ctx)
	ret0, _ := ret[0].([]*godo.AppTier)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTiers indicates an expected call of ListTiers.
func (mr *MockAppsServiceMockRecorder) ListTiers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTiers", reflect.TypeOf((*MockAppsService)(nil).ListTiers), ctx)
}

// Propose mocks base method.
func (m *MockAppsService) Propose(ctx context.Context, propose *godo.AppProposeRequest) (*godo.AppProposeResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", ctx, propose)
	ret0, _ := ret[0].(*godo.AppProposeResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Propose indicates an expected call of Propose.
func (mr *MockAppsServiceMockRecorder) Propose(ctx, propose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockAppsService)(nil).Propose), ctx, propose)
}

// ResetDatabasePassword mocks base method.
func (m *MockAppsService) ResetDatabasePassword(ctx context.Context, appID, component string) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDatabasePassword", ctx, appID, component)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetDatabasePassword indicates an expected call of ResetDatabasePassword.
func (mr *MockAppsServiceMockRecorder) ResetDatabasePassword(ctx, appID, component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDatabasePassword", reflect.TypeOf((*MockAppsService)(nil).ResetDatabasePassword), ctx, appID, component)
}

// Restart mocks base method.
func (m *MockAppsService) Restart(ctx context.Context, appID string, opts *godo.AppRestartRequest) (*godo.Deployment, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, appID, opts)
	ret0, _ := ret[0].(*godo.Deployment)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Restart indicates an expected call of Restart.
func (mr *MockAppsServiceMockRecorder) Restart(ctx, appID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockAppsService)(nil).Restart), ctx, appID, opts)
}

// ToggleDatabaseTrustedSource mocks base method.
func (m *MockAppsService) ToggleDatabaseTrustedSource(ctx context.Context, appID, component string, opts godo.ToggleDatabaseTrustedSourceOptions) (*godo.ToggleDatabaseTrustedSourceResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleDatabaseTrustedSource", ctx, appID, component, opts)
	ret0, _ := ret[0].(*godo.ToggleDatabaseTrustedSourceResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToggleDatabaseTrustedSource indicates an expected call of ToggleDatabaseTrustedSource.
func (mr *MockAppsServiceMockRecorder) ToggleDatabaseTrustedSource(ctx, appID, component, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleDatabaseTrustedSource", reflect.TypeOf((*MockAppsService)(nil).ToggleDatabaseTrustedSource), ctx, appID, component, opts)
}

// Update mocks base method.
func (m *MockAppsService) Update(ctx context.Context, appID string, update *godo.AppUpdateRequest) (*godo.App, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, appID, update)
	ret0, _ := ret[0].(*godo.App)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockAppsServiceMockRecorder) Update(ctx, appID, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAppsService)(nil).Update), ctx, appID, update)
}

// UpdateAlertDestinations mocks base method.
func (m *MockAppsService) UpdateAlertDestinations(ctx context.Context, appID, alertID string, update *godo.AlertDestinationUpdateRequest) (*godo.AppAlert, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertDestinations", ctx, appID, alertID, update)
	ret0, _ := ret[0].(*godo.AppAlert)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAlertDestinations indicates an expected call of UpdateAlertDestinations.
func (mr *MockAppsServiceMockRecorder) UpdateAlertDestinations(ctx, appID, alertID, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertDestinations", reflect.TypeOf((*MockAppsService)(nil).UpdateAlertDestinations), ctx, appID, alertID, update)
}

// UpgradeBuildpack mocks base method.
func (m *MockAppsService) UpgradeBuildpack(ctx context.Context, appID string, opts godo.UpgradeBuildpackOptions) (*godo.UpgradeBuildpackResponse, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeBuildpack", ctx, appID, opts)
	ret0, _ := ret[0].(*godo.UpgradeBuildpackResponse)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpgradeBuildpack indicates an expected call of UpgradeBuildpack.
func (mr *MockAppsServiceMockRecorder) UpgradeBuildpack(ctx, appID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeBuildpack", reflect.TypeOf((*MockAppsService)(nil).UpgradeBuildpack), ctx, appID, opts)
}
